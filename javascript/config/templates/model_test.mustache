{{>licenseInfo}}
(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/{{#invokerPackage}}{{.}}/{{/invokerPackage}}index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/{{#invokerPackage}}{{.}}/{{/invokerPackage}}index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.{{moduleName}});
  }
}(this, function(expect, {{moduleName}}) {
  'use strict';

  var instance;

  beforeEach(function() {
{{#models}}
{{#model}}
{{^isEnum}}
    try{
     instance = new {{moduleName}}.{{classname}}();
    } catch (e) {
     //Handle the cases when this model extends another model by using Model.call(this);
     instance = Object.create({{moduleName}}.{{classname}}.prototype);
    }
{{/isEnum}}
{{/model}}
{{/models}}
  });

  afterEach(function() {
    instance = null;
  })

{{#models}}
{{#model}}
{{^isEnum}}
  describe('{{classname}}', function() {
    it('should create an instance of {{classname}}', function() {
      expect(instance).to.be.a({{moduleName}}.{{classname}});
    });
{{/isEnum}}
{{#isEnum}}
  // it's Enum type, no test needed.
  describe('{{classname}}', function() {
{{/isEnum}}

{{#vars}}
    it('should have the property {{name}} (base name: "{{baseName}}")', function() {
      // verify property exists
      expect(instance).to.have.property('{{name}}');

      // set and verify value
      {{#isEnum}}
      var validValue = [{{#allowableValues}}{{#values}}'{{{.}}}'{{^@last}}, {{/@last}}{{/values}}{{/allowableValues}}][0];
      {{/isEnum}}
      {{^isEnum}}
      var validValue = generateMockData('{{datatype}}'{{#isArray}}, true{{/isArray}});
      {{/isEnum}}
      instance.{{name}} = validValue;
      expect(instance.{{name}}).to.equal(validValue);
    });

{{/vars}}
{{/model}}
{{/models}}
  });

  // Helper function to generate random test data
  function generateMockData(dataType, isArray = false) {
    if (!dataType) return {};

    // Handle array types
    if (isArray) {
      return [generateMockData(dataType), generateMockData(dataType)];
    }

    switch(dataType) {
      case 'String':
        return 'mock-' + Math.random().toString(36).substring(2, 10);
      case 'Number':
        return Math.floor(Math.random() * 1000);
      case 'Boolean':
        return Math.random() > 0.5;
      case 'Date':
        return new Date().toISOString();
      default:
        try {
          const ModelClass = {{moduleName}}[dataType];
          if (ModelClass) {
            const instance = Object.create(ModelClass.prototype);
            return instance;
          }
        } catch (e) {
          console.error("Error creating instance of", dataType);
          return {};
        }
        return {};
    }
  }

}));
