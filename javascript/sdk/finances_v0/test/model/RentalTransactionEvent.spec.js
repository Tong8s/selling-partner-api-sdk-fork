/**
 * Selling Partner API for Finances
 * The Selling Partner API for Finances helps you obtain financial information relevant to a seller's business. You can obtain financial events for a given order, financial event group, or date range without having to wait until a statement period closes. You can also obtain financial event groups for a given date range.
 *
 * The version of the OpenAPI document: v0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.SellingPartnerApiForFinances);
  }
}(this, function(expect, SellingPartnerApiForFinances) {
  'use strict';

  var instance;

  beforeEach(function() {
    try{
     instance = new SellingPartnerApiForFinances.RentalTransactionEvent();
    } catch (e) {
     //Handle the cases when this model extends another model by using Model.call(this);
     instance = Object.create(SellingPartnerApiForFinances.RentalTransactionEvent.prototype);
    }
  });

  afterEach(function() {
    instance = null;
  })

  describe('RentalTransactionEvent', function() {
    it('should create an instance of RentalTransactionEvent', function() {
      expect(instance).to.be.a(SellingPartnerApiForFinances.RentalTransactionEvent);
    });

    it('should have the property amazonOrderId', function() {
      // verify property exists
      expect(instance).to.have.property('amazonOrderId');

      // set and verify value
      var expectedValue = generateMockData('String');
      instance.amazonOrderId = expectedValue;
      expect(instance.amazonOrderId).to.equal(expectedValue);
    });

    it('should have the property rentalEventType', function() {
      // verify property exists
      expect(instance).to.have.property('rentalEventType');

      // set and verify value
      var expectedValue = generateMockData('String');
      instance.rentalEventType = expectedValue;
      expect(instance.rentalEventType).to.equal(expectedValue);
    });

    it('should have the property extensionLength', function() {
      // verify property exists
      expect(instance).to.have.property('extensionLength');

      // set and verify value
      var expectedValue = generateMockData('Number');
      instance.extensionLength = expectedValue;
      expect(instance.extensionLength).to.equal(expectedValue);
    });

    it('should have the property postedDate', function() {
      // verify property exists
      expect(instance).to.have.property('postedDate');

      // set and verify value
      var expectedValue = generateMockData('Date');
      instance.postedDate = expectedValue;
      expect(instance.postedDate).to.equal(expectedValue);
    });

    it('should have the property rentalChargeList', function() {
      // verify property exists
      expect(instance).to.have.property('rentalChargeList');

      // set and verify value
      var expectedValue = generateMockData('ChargeComponent', true);
      instance.rentalChargeList = expectedValue;
      expect(instance.rentalChargeList).to.equal(expectedValue);
    });

    it('should have the property rentalFeeList', function() {
      // verify property exists
      expect(instance).to.have.property('rentalFeeList');

      // set and verify value
      var expectedValue = generateMockData('FeeComponent', true);
      instance.rentalFeeList = expectedValue;
      expect(instance.rentalFeeList).to.equal(expectedValue);
    });

    it('should have the property marketplaceName', function() {
      // verify property exists
      expect(instance).to.have.property('marketplaceName');

      // set and verify value
      var expectedValue = generateMockData('String');
      instance.marketplaceName = expectedValue;
      expect(instance.marketplaceName).to.equal(expectedValue);
    });

    it('should have the property rentalInitialValue', function() {
      // verify property exists
      expect(instance).to.have.property('rentalInitialValue');

      // set and verify value
      var expectedValue = generateMockData('Currency');
      instance.rentalInitialValue = expectedValue;
      expect(instance.rentalInitialValue).to.equal(expectedValue);
    });

    it('should have the property rentalReimbursement', function() {
      // verify property exists
      expect(instance).to.have.property('rentalReimbursement');

      // set and verify value
      var expectedValue = generateMockData('Currency');
      instance.rentalReimbursement = expectedValue;
      expect(instance.rentalReimbursement).to.equal(expectedValue);
    });

    it('should have the property rentalTaxWithheldList', function() {
      // verify property exists
      expect(instance).to.have.property('rentalTaxWithheldList');

      // set and verify value
      var expectedValue = generateMockData('TaxWithheldComponent', true);
      instance.rentalTaxWithheldList = expectedValue;
      expect(instance.rentalTaxWithheldList).to.equal(expectedValue);
    });

  });

  // Helper function to generate random test data
  function generateMockData(dataType, isArray = false) {
    if (!dataType) return {};

    // Handle array types
    if (isArray) {
      return [generateMockData(dataType), generateMockData(dataType)];
    }

    switch(dataType) {
      case 'String':
        return 'mock-' + Math.random().toString(36).substring(2, 10);
      case 'Number':
        return Math.floor(Math.random() * 1000);
      case 'Boolean':
        return Math.random() > 0.5;
      case 'Date':
        return new Date().toISOString();
      default:
        try {
          const ModelClass = SellingPartnerApiForFinances[dataType];
          if (ModelClass) {
            const instance = Object.create(ModelClass.prototype);
            return instance;
          }
        } catch (e) {
          console.error("Error creating instance of", dataType);
          return {};
        }
        return {};
    }
  }

}));
