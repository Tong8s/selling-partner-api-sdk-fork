/**
 * Selling Partner API for Finances
 * The Selling Partner API for Finances helps you obtain financial information relevant to a seller's business. You can obtain financial events for a given order, financial event group, or date range without having to wait until a statement period closes. You can also obtain financial event groups for a given date range.
 *
 * The version of the OpenAPI document: v0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.SellingPartnerApiForFinances);
  }
}(this, function(expect, SellingPartnerApiForFinances) {
  'use strict';

  var instance;

  beforeEach(function() {
    try{
     instance = new SellingPartnerApiForFinances.ShipmentItem();
    } catch (e) {
     //Handle the cases when this model extends another model by using Model.call(this);
     instance = Object.create(SellingPartnerApiForFinances.ShipmentItem.prototype);
    }
  });

  afterEach(function() {
    instance = null;
  })

  describe('ShipmentItem', function() {
    it('should create an instance of ShipmentItem', function() {
      expect(instance).to.be.a(SellingPartnerApiForFinances.ShipmentItem);
    });

    it('should have the property sellerSKU (base name: "SellerSKU")', function() {
      // verify property exists
      expect(instance).to.have.property('sellerSKU');

      // set and verify value
      var validValue = generateMockData('String');
      instance.sellerSKU = validValue;
      expect(instance.sellerSKU).to.equal(validValue);
    });

    it('should have the property orderItemId (base name: "OrderItemId")', function() {
      // verify property exists
      expect(instance).to.have.property('orderItemId');

      // set and verify value
      var validValue = generateMockData('String');
      instance.orderItemId = validValue;
      expect(instance.orderItemId).to.equal(validValue);
    });

    it('should have the property orderAdjustmentItemId (base name: "OrderAdjustmentItemId")', function() {
      // verify property exists
      expect(instance).to.have.property('orderAdjustmentItemId');

      // set and verify value
      var validValue = generateMockData('String');
      instance.orderAdjustmentItemId = validValue;
      expect(instance.orderAdjustmentItemId).to.equal(validValue);
    });

    it('should have the property quantityShipped (base name: "QuantityShipped")', function() {
      // verify property exists
      expect(instance).to.have.property('quantityShipped');

      // set and verify value
      var validValue = generateMockData('Number');
      instance.quantityShipped = validValue;
      expect(instance.quantityShipped).to.equal(validValue);
    });

    it('should have the property itemChargeList (base name: "ItemChargeList")', function() {
      // verify property exists
      expect(instance).to.have.property('itemChargeList');

      // set and verify value
      var validValue = generateMockData('[ChargeComponent]', true);
      instance.itemChargeList = validValue;
      expect(instance.itemChargeList).to.equal(validValue);
    });

    it('should have the property itemChargeAdjustmentList (base name: "ItemChargeAdjustmentList")', function() {
      // verify property exists
      expect(instance).to.have.property('itemChargeAdjustmentList');

      // set and verify value
      var validValue = generateMockData('[ChargeComponent]', true);
      instance.itemChargeAdjustmentList = validValue;
      expect(instance.itemChargeAdjustmentList).to.equal(validValue);
    });

    it('should have the property itemFeeList (base name: "ItemFeeList")', function() {
      // verify property exists
      expect(instance).to.have.property('itemFeeList');

      // set and verify value
      var validValue = generateMockData('[FeeComponent]', true);
      instance.itemFeeList = validValue;
      expect(instance.itemFeeList).to.equal(validValue);
    });

    it('should have the property itemFeeAdjustmentList (base name: "ItemFeeAdjustmentList")', function() {
      // verify property exists
      expect(instance).to.have.property('itemFeeAdjustmentList');

      // set and verify value
      var validValue = generateMockData('[FeeComponent]', true);
      instance.itemFeeAdjustmentList = validValue;
      expect(instance.itemFeeAdjustmentList).to.equal(validValue);
    });

    it('should have the property itemTaxWithheldList (base name: "ItemTaxWithheldList")', function() {
      // verify property exists
      expect(instance).to.have.property('itemTaxWithheldList');

      // set and verify value
      var validValue = generateMockData('[TaxWithheldComponent]', true);
      instance.itemTaxWithheldList = validValue;
      expect(instance.itemTaxWithheldList).to.equal(validValue);
    });

    it('should have the property promotionList (base name: "PromotionList")', function() {
      // verify property exists
      expect(instance).to.have.property('promotionList');

      // set and verify value
      var validValue = generateMockData('[Promotion]', true);
      instance.promotionList = validValue;
      expect(instance.promotionList).to.equal(validValue);
    });

    it('should have the property promotionAdjustmentList (base name: "PromotionAdjustmentList")', function() {
      // verify property exists
      expect(instance).to.have.property('promotionAdjustmentList');

      // set and verify value
      var validValue = generateMockData('[Promotion]', true);
      instance.promotionAdjustmentList = validValue;
      expect(instance.promotionAdjustmentList).to.equal(validValue);
    });

    it('should have the property costOfPointsGranted (base name: "CostOfPointsGranted")', function() {
      // verify property exists
      expect(instance).to.have.property('costOfPointsGranted');

      // set and verify value
      var validValue = generateMockData('Currency');
      instance.costOfPointsGranted = validValue;
      expect(instance.costOfPointsGranted).to.equal(validValue);
    });

    it('should have the property costOfPointsReturned (base name: "CostOfPointsReturned")', function() {
      // verify property exists
      expect(instance).to.have.property('costOfPointsReturned');

      // set and verify value
      var validValue = generateMockData('Currency');
      instance.costOfPointsReturned = validValue;
      expect(instance.costOfPointsReturned).to.equal(validValue);
    });

  });

  // Helper function to generate random test data
  function generateMockData(dataType, isArray = false) {
    if (!dataType) return {};

    // Handle array types
    if (isArray) {
      return [generateMockData(dataType), generateMockData(dataType)];
    }

    switch(dataType) {
      case 'String':
        return 'mock-' + Math.random().toString(36).substring(2, 10);
      case 'Number':
        return Math.floor(Math.random() * 1000);
      case 'Boolean':
        return Math.random() > 0.5;
      case 'Date':
        return new Date().toISOString();
      default:
        try {
          const ModelClass = SellingPartnerApiForFinances[dataType];
          if (ModelClass) {
            const instance = Object.create(ModelClass.prototype);
            return instance;
          }
        } catch (e) {
          console.error("Error creating instance of", dataType);
          return {};
        }
        return {};
    }
  }

}));
