/**
 * Selling Partner APIs for Fulfillment Outbound
 * The Selling Partner API for Fulfillment Outbound lets you create applications that help a seller fulfill Multi-Channel Fulfillment orders using their inventory in Amazon's fulfillment network. You can get information on both potential and existing fulfillment orders.
 *
 * The version of the OpenAPI document: 2020-07-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', 'sinon', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('sinon'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.sinon, root.SellingPartnerApisForFulfillmentOutbound);
  }
}(this, function(expect, sinon, SellingPartnerApisForFulfillmentOutbound) {
  'use strict';

  var instance;
  var sandbox;
  const testEndpoint = 'https://localhost:3000';
  const testAccessToken = "testAccessToken";

  // Helper function to generate random test data
  function generateMockData(dataType, isArray = false) {
    if (!dataType) return {};

    // Handle array types
    if (isArray) {
      return [generateMockData(dataType), generateMockData(dataType)];
    }

    switch(dataType) {
      case 'String':
        return 'mock-' + Math.random().toString(36).substring(2, 10);
      case 'Number':
        return Math.floor(Math.random() * 1000);
      case 'Boolean':
        return Math.random() > 0.5;
      case 'Date':
        return new Date().toISOString();
      default:
        try {
          const ModelClass = SellingPartnerApisForFulfillmentOutbound[dataType];
          if (ModelClass) {
            const instance = Object.create(ModelClass.prototype);
            if (ModelClass.RequiredProperties) {
              ModelClass.RequiredProperties.forEach(prop => {
                const propType = ModelClass.types[prop];
                instance[prop] = generateMockData(propType);
              });
            }
            return instance;
          }
        } catch (e) {
          console.error("Error creating instance of", dataType);
          return {};
        }
        return {};
    }
  }
  

// Generate mock requests and responses for each operation
const mockcancelFulfillmentOrderData = {
  request: {
    'sellerFulfillmentOrderId': generateMockData('String')
  },
  response: {
    data: generateMockData('CancelFulfillmentOrderResponse'),
    statusCode: 200,
    headers: {}
  }
};
const mockcreateFulfillmentOrderData = {
  request: {
    'body': generateMockData('CreateFulfillmentOrderRequest')
  },
  response: {
    data: generateMockData('CreateFulfillmentOrderResponse'),
    statusCode: 200,
    headers: {}
  }
};
const mockcreateFulfillmentReturnData = {
  request: {
    'sellerFulfillmentOrderId': generateMockData('String'),
    'body': generateMockData('CreateFulfillmentReturnRequest')
  },
  response: {
    data: generateMockData('CreateFulfillmentReturnResponse'),
    statusCode: 200,
    headers: {}
  }
};
const mockdeliveryOffersData = {
  request: {
    'body': generateMockData('GetDeliveryOffersRequest')
  },
  response: {
    data: generateMockData('GetDeliveryOffersResponse'),
    statusCode: 200,
    headers: {}
  }
};
const mockgetFeatureInventoryData = {
  request: {
    'marketplaceId': generateMockData('String'),
    'featureName': generateMockData('String'),
  },
  response: {
    data: generateMockData('GetFeatureInventoryResponse'),
    statusCode: 200,
    headers: {}
  }
};
const mockgetFeatureSKUData = {
  request: {
    'marketplaceId': generateMockData('String'),
    'featureName': generateMockData('String'),
    'sellerSku': generateMockData('String')
  },
  response: {
    data: generateMockData('GetFeatureSkuResponse'),
    statusCode: 200,
    headers: {}
  }
};
const mockgetFeaturesData = {
  request: {
    'marketplaceId': generateMockData('String')
  },
  response: {
    data: generateMockData('GetFeaturesResponse'),
    statusCode: 200,
    headers: {}
  }
};
const mockgetFulfillmentOrderData = {
  request: {
    'sellerFulfillmentOrderId': generateMockData('String')
  },
  response: {
    data: generateMockData('GetFulfillmentOrderResponse'),
    statusCode: 200,
    headers: {}
  }
};
const mockgetFulfillmentPreviewData = {
  request: {
    'body': generateMockData('GetFulfillmentPreviewRequest')
  },
  response: {
    data: generateMockData('GetFulfillmentPreviewResponse'),
    statusCode: 200,
    headers: {}
  }
};
const mockgetPackageTrackingDetailsData = {
  request: {
    'packageNumber': generateMockData('Number')
  },
  response: {
    data: generateMockData('GetPackageTrackingDetailsResponse'),
    statusCode: 200,
    headers: {}
  }
};
const mocklistAllFulfillmentOrdersData = {
  request: {
  },
  response: {
    data: generateMockData('ListAllFulfillmentOrdersResponse'),
    statusCode: 200,
    headers: {}
  }
};
const mocklistReturnReasonCodesData = {
  request: {
    'sellerSku': generateMockData('String'),
  },
  response: {
    data: generateMockData('ListReturnReasonCodesResponse'),
    statusCode: 200,
    headers: {}
  }
};
const mocksubmitFulfillmentOrderStatusUpdateData = {
  request: {
    'sellerFulfillmentOrderId': generateMockData('String'),
    'body': generateMockData('SubmitFulfillmentOrderStatusUpdateRequest')
  },
  response: {
    data: generateMockData('SubmitFulfillmentOrderStatusUpdateResponse'),
    statusCode: 200,
    headers: {}
  }
};
const mockupdateFulfillmentOrderData = {
  request: {
    'sellerFulfillmentOrderId': generateMockData('String'),
    'body': generateMockData('UpdateFulfillmentOrderRequest')
  },
  response: {
    data: generateMockData('UpdateFulfillmentOrderResponse'),
    statusCode: 200,
    headers: {}
  }
};

  beforeEach(function() {
    sandbox = sinon.createSandbox();
    var apiClientInstance = new SellingPartnerApisForFulfillmentOutbound.ApiClient(testEndpoint);
    apiClientInstance.applyXAmzAccessTokenToRequest(testAccessToken);
    sandbox.stub(apiClientInstance, 'callApi');
    instance = new SellingPartnerApisForFulfillmentOutbound.FbaOutboundApi(apiClientInstance);
  });

  afterEach(function() {
    sandbox.restore();
  });

  describe('FbaOutboundApi', function() {
    describe('cancelFulfillmentOrder', function() {
      
      it('should successfully call cancelFulfillmentOrder', function(done) {
        instance.apiClient.callApi.resolves(mockcancelFulfillmentOrderData.response);

        const params = [
          mockcancelFulfillmentOrderData.request['sellerFulfillmentOrderId']
        ];
        instance.cancelFulfillmentOrder(...params)
          .then(function(data) {
            expect(data instanceof SellingPartnerApisForFulfillmentOutbound.CancelFulfillmentOrderResponse).to.be.true;
            done();
          })
          .catch(done);
      });

      it('should successfully call cancelFulfillmentOrderWithHttpInfo', function(done) {
        instance.apiClient.callApi.resolves(mockcancelFulfillmentOrderData.response);

        const params = [
          mockcancelFulfillmentOrderData.request['sellerFulfillmentOrderId']
        ];
        instance.cancelFulfillmentOrderWithHttpInfo(...params)
          .then(function(response) {
            expect(response).to.have.property('statusCode');
            expect(response.statusCode).to.equal(mockcancelFulfillmentOrderData.response.statusCode)
            expect(response).to.have.property('headers');
            expect(response).to.have.property('data');
            done();
          })
          .catch(done);
      });

      it('should handle API errors', function(done) {
        var errorResponse = {
          errors: new Error('Expected error to be thrown'),
          statusCode: 400,
          headers: {}
        };
        instance.apiClient.callApi.rejects(errorResponse);

        const params = [
          mockcancelFulfillmentOrderData.request['sellerFulfillmentOrderId']
        ];
        instance.cancelFulfillmentOrder(...params)
          .then(function() {
            done(new Error('Expected error to be thrown'));
          })
          .catch(function(error) {
            expect(error).to.exist;
            expect(error.statusCode).to.equal(400)
            done();
          });
      });
    });
    describe('createFulfillmentOrder', function() {
      
      it('should successfully call createFulfillmentOrder', function(done) {
        instance.apiClient.callApi.resolves(mockcreateFulfillmentOrderData.response);

        const params = [
          mockcreateFulfillmentOrderData.request['body']
        ];
        instance.createFulfillmentOrder(...params)
          .then(function(data) {
            expect(data instanceof SellingPartnerApisForFulfillmentOutbound.CreateFulfillmentOrderResponse).to.be.true;
            done();
          })
          .catch(done);
      });

      it('should successfully call createFulfillmentOrderWithHttpInfo', function(done) {
        instance.apiClient.callApi.resolves(mockcreateFulfillmentOrderData.response);

        const params = [
          mockcreateFulfillmentOrderData.request['body']
        ];
        instance.createFulfillmentOrderWithHttpInfo(...params)
          .then(function(response) {
            expect(response).to.have.property('statusCode');
            expect(response.statusCode).to.equal(mockcreateFulfillmentOrderData.response.statusCode)
            expect(response).to.have.property('headers');
            expect(response).to.have.property('data');
            done();
          })
          .catch(done);
      });

      it('should handle API errors', function(done) {
        var errorResponse = {
          errors: new Error('Expected error to be thrown'),
          statusCode: 400,
          headers: {}
        };
        instance.apiClient.callApi.rejects(errorResponse);

        const params = [
          mockcreateFulfillmentOrderData.request['body']
        ];
        instance.createFulfillmentOrder(...params)
          .then(function() {
            done(new Error('Expected error to be thrown'));
          })
          .catch(function(error) {
            expect(error).to.exist;
            expect(error.statusCode).to.equal(400)
            done();
          });
      });
    });
    describe('createFulfillmentReturn', function() {
      
      it('should successfully call createFulfillmentReturn', function(done) {
        instance.apiClient.callApi.resolves(mockcreateFulfillmentReturnData.response);

        const params = [
          mockcreateFulfillmentReturnData.request['sellerFulfillmentOrderId'],
          mockcreateFulfillmentReturnData.request['body']
        ];
        instance.createFulfillmentReturn(...params)
          .then(function(data) {
            expect(data instanceof SellingPartnerApisForFulfillmentOutbound.CreateFulfillmentReturnResponse).to.be.true;
            done();
          })
          .catch(done);
      });

      it('should successfully call createFulfillmentReturnWithHttpInfo', function(done) {
        instance.apiClient.callApi.resolves(mockcreateFulfillmentReturnData.response);

        const params = [
          mockcreateFulfillmentReturnData.request['sellerFulfillmentOrderId'],
          mockcreateFulfillmentReturnData.request['body']
        ];
        instance.createFulfillmentReturnWithHttpInfo(...params)
          .then(function(response) {
            expect(response).to.have.property('statusCode');
            expect(response.statusCode).to.equal(mockcreateFulfillmentReturnData.response.statusCode)
            expect(response).to.have.property('headers');
            expect(response).to.have.property('data');
            done();
          })
          .catch(done);
      });

      it('should handle API errors', function(done) {
        var errorResponse = {
          errors: new Error('Expected error to be thrown'),
          statusCode: 400,
          headers: {}
        };
        instance.apiClient.callApi.rejects(errorResponse);

        const params = [
          mockcreateFulfillmentReturnData.request['sellerFulfillmentOrderId'],
          mockcreateFulfillmentReturnData.request['body']
        ];
        instance.createFulfillmentReturn(...params)
          .then(function() {
            done(new Error('Expected error to be thrown'));
          })
          .catch(function(error) {
            expect(error).to.exist;
            expect(error.statusCode).to.equal(400)
            done();
          });
      });
    });
    describe('deliveryOffers', function() {
      
      it('should successfully call deliveryOffers', function(done) {
        instance.apiClient.callApi.resolves(mockdeliveryOffersData.response);

        const params = [
          mockdeliveryOffersData.request['body']
        ];
        instance.deliveryOffers(...params)
          .then(function(data) {
            expect(data instanceof SellingPartnerApisForFulfillmentOutbound.GetDeliveryOffersResponse).to.be.true;
            done();
          })
          .catch(done);
      });

      it('should successfully call deliveryOffersWithHttpInfo', function(done) {
        instance.apiClient.callApi.resolves(mockdeliveryOffersData.response);

        const params = [
          mockdeliveryOffersData.request['body']
        ];
        instance.deliveryOffersWithHttpInfo(...params)
          .then(function(response) {
            expect(response).to.have.property('statusCode');
            expect(response.statusCode).to.equal(mockdeliveryOffersData.response.statusCode)
            expect(response).to.have.property('headers');
            expect(response).to.have.property('data');
            done();
          })
          .catch(done);
      });

      it('should handle API errors', function(done) {
        var errorResponse = {
          errors: new Error('Expected error to be thrown'),
          statusCode: 400,
          headers: {}
        };
        instance.apiClient.callApi.rejects(errorResponse);

        const params = [
          mockdeliveryOffersData.request['body']
        ];
        instance.deliveryOffers(...params)
          .then(function() {
            done(new Error('Expected error to be thrown'));
          })
          .catch(function(error) {
            expect(error).to.exist;
            expect(error.statusCode).to.equal(400)
            done();
          });
      });
    });
    describe('getFeatureInventory', function() {
      
      it('should successfully call getFeatureInventory', function(done) {
        instance.apiClient.callApi.resolves(mockgetFeatureInventoryData.response);

        const params = [
          mockgetFeatureInventoryData.request['marketplaceId'],
          mockgetFeatureInventoryData.request['featureName'],
        ];
        instance.getFeatureInventory(...params)
          .then(function(data) {
            expect(data instanceof SellingPartnerApisForFulfillmentOutbound.GetFeatureInventoryResponse).to.be.true;
            done();
          })
          .catch(done);
      });

      it('should successfully call getFeatureInventoryWithHttpInfo', function(done) {
        instance.apiClient.callApi.resolves(mockgetFeatureInventoryData.response);

        const params = [
          mockgetFeatureInventoryData.request['marketplaceId'],
          mockgetFeatureInventoryData.request['featureName'],
        ];
        instance.getFeatureInventoryWithHttpInfo(...params)
          .then(function(response) {
            expect(response).to.have.property('statusCode');
            expect(response.statusCode).to.equal(mockgetFeatureInventoryData.response.statusCode)
            expect(response).to.have.property('headers');
            expect(response).to.have.property('data');
            done();
          })
          .catch(done);
      });

      it('should handle API errors', function(done) {
        var errorResponse = {
          errors: new Error('Expected error to be thrown'),
          statusCode: 400,
          headers: {}
        };
        instance.apiClient.callApi.rejects(errorResponse);

        const params = [
          mockgetFeatureInventoryData.request['marketplaceId'],
          mockgetFeatureInventoryData.request['featureName'],
        ];
        instance.getFeatureInventory(...params)
          .then(function() {
            done(new Error('Expected error to be thrown'));
          })
          .catch(function(error) {
            expect(error).to.exist;
            expect(error.statusCode).to.equal(400)
            done();
          });
      });
    });
    describe('getFeatureSKU', function() {
      
      it('should successfully call getFeatureSKU', function(done) {
        instance.apiClient.callApi.resolves(mockgetFeatureSKUData.response);

        const params = [
          mockgetFeatureSKUData.request['marketplaceId'],
          mockgetFeatureSKUData.request['featureName'],
          mockgetFeatureSKUData.request['sellerSku']
        ];
        instance.getFeatureSKU(...params)
          .then(function(data) {
            expect(data instanceof SellingPartnerApisForFulfillmentOutbound.GetFeatureSkuResponse).to.be.true;
            done();
          })
          .catch(done);
      });

      it('should successfully call getFeatureSKUWithHttpInfo', function(done) {
        instance.apiClient.callApi.resolves(mockgetFeatureSKUData.response);

        const params = [
          mockgetFeatureSKUData.request['marketplaceId'],
          mockgetFeatureSKUData.request['featureName'],
          mockgetFeatureSKUData.request['sellerSku']
        ];
        instance.getFeatureSKUWithHttpInfo(...params)
          .then(function(response) {
            expect(response).to.have.property('statusCode');
            expect(response.statusCode).to.equal(mockgetFeatureSKUData.response.statusCode)
            expect(response).to.have.property('headers');
            expect(response).to.have.property('data');
            done();
          })
          .catch(done);
      });

      it('should handle API errors', function(done) {
        var errorResponse = {
          errors: new Error('Expected error to be thrown'),
          statusCode: 400,
          headers: {}
        };
        instance.apiClient.callApi.rejects(errorResponse);

        const params = [
          mockgetFeatureSKUData.request['marketplaceId'],
          mockgetFeatureSKUData.request['featureName'],
          mockgetFeatureSKUData.request['sellerSku']
        ];
        instance.getFeatureSKU(...params)
          .then(function() {
            done(new Error('Expected error to be thrown'));
          })
          .catch(function(error) {
            expect(error).to.exist;
            expect(error.statusCode).to.equal(400)
            done();
          });
      });
    });
    describe('getFeatures', function() {
      
      it('should successfully call getFeatures', function(done) {
        instance.apiClient.callApi.resolves(mockgetFeaturesData.response);

        const params = [
          mockgetFeaturesData.request['marketplaceId']
        ];
        instance.getFeatures(...params)
          .then(function(data) {
            expect(data instanceof SellingPartnerApisForFulfillmentOutbound.GetFeaturesResponse).to.be.true;
            done();
          })
          .catch(done);
      });

      it('should successfully call getFeaturesWithHttpInfo', function(done) {
        instance.apiClient.callApi.resolves(mockgetFeaturesData.response);

        const params = [
          mockgetFeaturesData.request['marketplaceId']
        ];
        instance.getFeaturesWithHttpInfo(...params)
          .then(function(response) {
            expect(response).to.have.property('statusCode');
            expect(response.statusCode).to.equal(mockgetFeaturesData.response.statusCode)
            expect(response).to.have.property('headers');
            expect(response).to.have.property('data');
            done();
          })
          .catch(done);
      });

      it('should handle API errors', function(done) {
        var errorResponse = {
          errors: new Error('Expected error to be thrown'),
          statusCode: 400,
          headers: {}
        };
        instance.apiClient.callApi.rejects(errorResponse);

        const params = [
          mockgetFeaturesData.request['marketplaceId']
        ];
        instance.getFeatures(...params)
          .then(function() {
            done(new Error('Expected error to be thrown'));
          })
          .catch(function(error) {
            expect(error).to.exist;
            expect(error.statusCode).to.equal(400)
            done();
          });
      });
    });
    describe('getFulfillmentOrder', function() {
      
      it('should successfully call getFulfillmentOrder', function(done) {
        instance.apiClient.callApi.resolves(mockgetFulfillmentOrderData.response);

        const params = [
          mockgetFulfillmentOrderData.request['sellerFulfillmentOrderId']
        ];
        instance.getFulfillmentOrder(...params)
          .then(function(data) {
            expect(data instanceof SellingPartnerApisForFulfillmentOutbound.GetFulfillmentOrderResponse).to.be.true;
            done();
          })
          .catch(done);
      });

      it('should successfully call getFulfillmentOrderWithHttpInfo', function(done) {
        instance.apiClient.callApi.resolves(mockgetFulfillmentOrderData.response);

        const params = [
          mockgetFulfillmentOrderData.request['sellerFulfillmentOrderId']
        ];
        instance.getFulfillmentOrderWithHttpInfo(...params)
          .then(function(response) {
            expect(response).to.have.property('statusCode');
            expect(response.statusCode).to.equal(mockgetFulfillmentOrderData.response.statusCode)
            expect(response).to.have.property('headers');
            expect(response).to.have.property('data');
            done();
          })
          .catch(done);
      });

      it('should handle API errors', function(done) {
        var errorResponse = {
          errors: new Error('Expected error to be thrown'),
          statusCode: 400,
          headers: {}
        };
        instance.apiClient.callApi.rejects(errorResponse);

        const params = [
          mockgetFulfillmentOrderData.request['sellerFulfillmentOrderId']
        ];
        instance.getFulfillmentOrder(...params)
          .then(function() {
            done(new Error('Expected error to be thrown'));
          })
          .catch(function(error) {
            expect(error).to.exist;
            expect(error.statusCode).to.equal(400)
            done();
          });
      });
    });
    describe('getFulfillmentPreview', function() {
      
      it('should successfully call getFulfillmentPreview', function(done) {
        instance.apiClient.callApi.resolves(mockgetFulfillmentPreviewData.response);

        const params = [
          mockgetFulfillmentPreviewData.request['body']
        ];
        instance.getFulfillmentPreview(...params)
          .then(function(data) {
            expect(data instanceof SellingPartnerApisForFulfillmentOutbound.GetFulfillmentPreviewResponse).to.be.true;
            done();
          })
          .catch(done);
      });

      it('should successfully call getFulfillmentPreviewWithHttpInfo', function(done) {
        instance.apiClient.callApi.resolves(mockgetFulfillmentPreviewData.response);

        const params = [
          mockgetFulfillmentPreviewData.request['body']
        ];
        instance.getFulfillmentPreviewWithHttpInfo(...params)
          .then(function(response) {
            expect(response).to.have.property('statusCode');
            expect(response.statusCode).to.equal(mockgetFulfillmentPreviewData.response.statusCode)
            expect(response).to.have.property('headers');
            expect(response).to.have.property('data');
            done();
          })
          .catch(done);
      });

      it('should handle API errors', function(done) {
        var errorResponse = {
          errors: new Error('Expected error to be thrown'),
          statusCode: 400,
          headers: {}
        };
        instance.apiClient.callApi.rejects(errorResponse);

        const params = [
          mockgetFulfillmentPreviewData.request['body']
        ];
        instance.getFulfillmentPreview(...params)
          .then(function() {
            done(new Error('Expected error to be thrown'));
          })
          .catch(function(error) {
            expect(error).to.exist;
            expect(error.statusCode).to.equal(400)
            done();
          });
      });
    });
    describe('getPackageTrackingDetails', function() {
      
      it('should successfully call getPackageTrackingDetails', function(done) {
        instance.apiClient.callApi.resolves(mockgetPackageTrackingDetailsData.response);

        const params = [
          mockgetPackageTrackingDetailsData.request['packageNumber']
        ];
        instance.getPackageTrackingDetails(...params)
          .then(function(data) {
            expect(data instanceof SellingPartnerApisForFulfillmentOutbound.GetPackageTrackingDetailsResponse).to.be.true;
            done();
          })
          .catch(done);
      });

      it('should successfully call getPackageTrackingDetailsWithHttpInfo', function(done) {
        instance.apiClient.callApi.resolves(mockgetPackageTrackingDetailsData.response);

        const params = [
          mockgetPackageTrackingDetailsData.request['packageNumber']
        ];
        instance.getPackageTrackingDetailsWithHttpInfo(...params)
          .then(function(response) {
            expect(response).to.have.property('statusCode');
            expect(response.statusCode).to.equal(mockgetPackageTrackingDetailsData.response.statusCode)
            expect(response).to.have.property('headers');
            expect(response).to.have.property('data');
            done();
          })
          .catch(done);
      });

      it('should handle API errors', function(done) {
        var errorResponse = {
          errors: new Error('Expected error to be thrown'),
          statusCode: 400,
          headers: {}
        };
        instance.apiClient.callApi.rejects(errorResponse);

        const params = [
          mockgetPackageTrackingDetailsData.request['packageNumber']
        ];
        instance.getPackageTrackingDetails(...params)
          .then(function() {
            done(new Error('Expected error to be thrown'));
          })
          .catch(function(error) {
            expect(error).to.exist;
            expect(error.statusCode).to.equal(400)
            done();
          });
      });
    });
    describe('listAllFulfillmentOrders', function() {
      
      it('should successfully call listAllFulfillmentOrders', function(done) {
        instance.apiClient.callApi.resolves(mocklistAllFulfillmentOrdersData.response);

        const params = [
        ];
        instance.listAllFulfillmentOrders(...params)
          .then(function(data) {
            expect(data instanceof SellingPartnerApisForFulfillmentOutbound.ListAllFulfillmentOrdersResponse).to.be.true;
            done();
          })
          .catch(done);
      });

      it('should successfully call listAllFulfillmentOrdersWithHttpInfo', function(done) {
        instance.apiClient.callApi.resolves(mocklistAllFulfillmentOrdersData.response);

        const params = [
        ];
        instance.listAllFulfillmentOrdersWithHttpInfo(...params)
          .then(function(response) {
            expect(response).to.have.property('statusCode');
            expect(response.statusCode).to.equal(mocklistAllFulfillmentOrdersData.response.statusCode)
            expect(response).to.have.property('headers');
            expect(response).to.have.property('data');
            done();
          })
          .catch(done);
      });

      it('should handle API errors', function(done) {
        var errorResponse = {
          errors: new Error('Expected error to be thrown'),
          statusCode: 400,
          headers: {}
        };
        instance.apiClient.callApi.rejects(errorResponse);

        const params = [
        ];
        instance.listAllFulfillmentOrders(...params)
          .then(function() {
            done(new Error('Expected error to be thrown'));
          })
          .catch(function(error) {
            expect(error).to.exist;
            expect(error.statusCode).to.equal(400)
            done();
          });
      });
    });
    describe('listReturnReasonCodes', function() {
      
      it('should successfully call listReturnReasonCodes', function(done) {
        instance.apiClient.callApi.resolves(mocklistReturnReasonCodesData.response);

        const params = [
          mocklistReturnReasonCodesData.request['sellerSku'],
        ];
        instance.listReturnReasonCodes(...params)
          .then(function(data) {
            expect(data instanceof SellingPartnerApisForFulfillmentOutbound.ListReturnReasonCodesResponse).to.be.true;
            done();
          })
          .catch(done);
      });

      it('should successfully call listReturnReasonCodesWithHttpInfo', function(done) {
        instance.apiClient.callApi.resolves(mocklistReturnReasonCodesData.response);

        const params = [
          mocklistReturnReasonCodesData.request['sellerSku'],
        ];
        instance.listReturnReasonCodesWithHttpInfo(...params)
          .then(function(response) {
            expect(response).to.have.property('statusCode');
            expect(response.statusCode).to.equal(mocklistReturnReasonCodesData.response.statusCode)
            expect(response).to.have.property('headers');
            expect(response).to.have.property('data');
            done();
          })
          .catch(done);
      });

      it('should handle API errors', function(done) {
        var errorResponse = {
          errors: new Error('Expected error to be thrown'),
          statusCode: 400,
          headers: {}
        };
        instance.apiClient.callApi.rejects(errorResponse);

        const params = [
          mocklistReturnReasonCodesData.request['sellerSku'],
        ];
        instance.listReturnReasonCodes(...params)
          .then(function() {
            done(new Error('Expected error to be thrown'));
          })
          .catch(function(error) {
            expect(error).to.exist;
            expect(error.statusCode).to.equal(400)
            done();
          });
      });
    });
    describe('submitFulfillmentOrderStatusUpdate', function() {
      
      it('should successfully call submitFulfillmentOrderStatusUpdate', function(done) {
        instance.apiClient.callApi.resolves(mocksubmitFulfillmentOrderStatusUpdateData.response);

        const params = [
          mocksubmitFulfillmentOrderStatusUpdateData.request['sellerFulfillmentOrderId'],
          mocksubmitFulfillmentOrderStatusUpdateData.request['body']
        ];
        instance.submitFulfillmentOrderStatusUpdate(...params)
          .then(function(data) {
            expect(data instanceof SellingPartnerApisForFulfillmentOutbound.SubmitFulfillmentOrderStatusUpdateResponse).to.be.true;
            done();
          })
          .catch(done);
      });

      it('should successfully call submitFulfillmentOrderStatusUpdateWithHttpInfo', function(done) {
        instance.apiClient.callApi.resolves(mocksubmitFulfillmentOrderStatusUpdateData.response);

        const params = [
          mocksubmitFulfillmentOrderStatusUpdateData.request['sellerFulfillmentOrderId'],
          mocksubmitFulfillmentOrderStatusUpdateData.request['body']
        ];
        instance.submitFulfillmentOrderStatusUpdateWithHttpInfo(...params)
          .then(function(response) {
            expect(response).to.have.property('statusCode');
            expect(response.statusCode).to.equal(mocksubmitFulfillmentOrderStatusUpdateData.response.statusCode)
            expect(response).to.have.property('headers');
            expect(response).to.have.property('data');
            done();
          })
          .catch(done);
      });

      it('should handle API errors', function(done) {
        var errorResponse = {
          errors: new Error('Expected error to be thrown'),
          statusCode: 400,
          headers: {}
        };
        instance.apiClient.callApi.rejects(errorResponse);

        const params = [
          mocksubmitFulfillmentOrderStatusUpdateData.request['sellerFulfillmentOrderId'],
          mocksubmitFulfillmentOrderStatusUpdateData.request['body']
        ];
        instance.submitFulfillmentOrderStatusUpdate(...params)
          .then(function() {
            done(new Error('Expected error to be thrown'));
          })
          .catch(function(error) {
            expect(error).to.exist;
            expect(error.statusCode).to.equal(400)
            done();
          });
      });
    });
    describe('updateFulfillmentOrder', function() {
      
      it('should successfully call updateFulfillmentOrder', function(done) {
        instance.apiClient.callApi.resolves(mockupdateFulfillmentOrderData.response);

        const params = [
          mockupdateFulfillmentOrderData.request['sellerFulfillmentOrderId'],
          mockupdateFulfillmentOrderData.request['body']
        ];
        instance.updateFulfillmentOrder(...params)
          .then(function(data) {
            expect(data instanceof SellingPartnerApisForFulfillmentOutbound.UpdateFulfillmentOrderResponse).to.be.true;
            done();
          })
          .catch(done);
      });

      it('should successfully call updateFulfillmentOrderWithHttpInfo', function(done) {
        instance.apiClient.callApi.resolves(mockupdateFulfillmentOrderData.response);

        const params = [
          mockupdateFulfillmentOrderData.request['sellerFulfillmentOrderId'],
          mockupdateFulfillmentOrderData.request['body']
        ];
        instance.updateFulfillmentOrderWithHttpInfo(...params)
          .then(function(response) {
            expect(response).to.have.property('statusCode');
            expect(response.statusCode).to.equal(mockupdateFulfillmentOrderData.response.statusCode)
            expect(response).to.have.property('headers');
            expect(response).to.have.property('data');
            done();
          })
          .catch(done);
      });

      it('should handle API errors', function(done) {
        var errorResponse = {
          errors: new Error('Expected error to be thrown'),
          statusCode: 400,
          headers: {}
        };
        instance.apiClient.callApi.rejects(errorResponse);

        const params = [
          mockupdateFulfillmentOrderData.request['sellerFulfillmentOrderId'],
          mockupdateFulfillmentOrderData.request['body']
        ];
        instance.updateFulfillmentOrder(...params)
          .then(function() {
            done(new Error('Expected error to be thrown'));
          })
          .catch(function(error) {
            expect(error).to.exist;
            expect(error.statusCode).to.equal(400)
            done();
          });
      });
    });

    describe('constructor', function() {
      it('should use default ApiClient when none provided', function() {
        var defaultInstance = new SellingPartnerApisForFulfillmentOutbound.FbaOutboundApi();
        expect(defaultInstance.apiClient).to.equal(SellingPartnerApisForFulfillmentOutbound.ApiClient.instance);
      });

      it('should use provided ApiClient', function() {
        var customClient = new SellingPartnerApisForFulfillmentOutbound.ApiClient();
        var customInstance = new SellingPartnerApisForFulfillmentOutbound.FbaOutboundApi(customClient);
        expect(customInstance.apiClient).to.equal(customClient);
      });
    });
  });
}));
