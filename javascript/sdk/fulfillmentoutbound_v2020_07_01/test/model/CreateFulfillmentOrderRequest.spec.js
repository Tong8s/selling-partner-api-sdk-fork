/**
 * Selling Partner APIs for Fulfillment Outbound
 * The Selling Partner API for Fulfillment Outbound lets you create applications that help a seller fulfill Multi-Channel Fulfillment orders using their inventory in Amazon's fulfillment network. You can get information on both potential and existing fulfillment orders.
 *
 * The version of the OpenAPI document: 2020-07-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.SellingPartnerApisForFulfillmentOutbound);
  }
}(this, function(expect, SellingPartnerApisForFulfillmentOutbound) {
  'use strict';

  var instance;

  beforeEach(function() {
    try{
     instance = new SellingPartnerApisForFulfillmentOutbound.CreateFulfillmentOrderRequest();
    } catch (e) {
     //Handle the cases when this model extends another model by using Model.call(this);
     instance = Object.create(SellingPartnerApisForFulfillmentOutbound.CreateFulfillmentOrderRequest.prototype);
    }
  });

  afterEach(function() {
    instance = null;
  })

  describe('CreateFulfillmentOrderRequest', function() {
    it('should create an instance of CreateFulfillmentOrderRequest', function() {
      expect(instance).to.be.a(SellingPartnerApisForFulfillmentOutbound.CreateFulfillmentOrderRequest);
    });

    it('should have the property marketplaceId (base name: "marketplaceId")', function() {
      // verify property exists
      expect(instance).to.have.property('marketplaceId');

      // set and verify value
      var validValue = generateMockData('String');
      instance.marketplaceId = validValue;
      expect(instance.marketplaceId).to.equal(validValue);
    });

    it('should have the property sellerFulfillmentOrderId (base name: "sellerFulfillmentOrderId")', function() {
      // verify property exists
      expect(instance).to.have.property('sellerFulfillmentOrderId');

      // set and verify value
      var validValue = generateMockData('String');
      instance.sellerFulfillmentOrderId = validValue;
      expect(instance.sellerFulfillmentOrderId).to.equal(validValue);
    });

    it('should have the property displayableOrderId (base name: "displayableOrderId")', function() {
      // verify property exists
      expect(instance).to.have.property('displayableOrderId');

      // set and verify value
      var validValue = generateMockData('String');
      instance.displayableOrderId = validValue;
      expect(instance.displayableOrderId).to.equal(validValue);
    });

    it('should have the property displayableOrderDate (base name: "displayableOrderDate")', function() {
      // verify property exists
      expect(instance).to.have.property('displayableOrderDate');

      // set and verify value
      var validValue = generateMockData('Date');
      instance.displayableOrderDate = validValue;
      expect(instance.displayableOrderDate).to.equal(validValue);
    });

    it('should have the property displayableOrderComment (base name: "displayableOrderComment")', function() {
      // verify property exists
      expect(instance).to.have.property('displayableOrderComment');

      // set and verify value
      var validValue = generateMockData('String');
      instance.displayableOrderComment = validValue;
      expect(instance.displayableOrderComment).to.equal(validValue);
    });

    it('should have the property shippingSpeedCategory (base name: "shippingSpeedCategory")', function() {
      // verify property exists
      expect(instance).to.have.property('shippingSpeedCategory');

      // set and verify value
      var validValue = generateMockData('ShippingSpeedCategory');
      instance.shippingSpeedCategory = validValue;
      expect(instance.shippingSpeedCategory).to.equal(validValue);
    });

    it('should have the property deliveryWindow (base name: "deliveryWindow")', function() {
      // verify property exists
      expect(instance).to.have.property('deliveryWindow');

      // set and verify value
      var validValue = generateMockData('DeliveryWindow');
      instance.deliveryWindow = validValue;
      expect(instance.deliveryWindow).to.equal(validValue);
    });

    it('should have the property destinationAddress (base name: "destinationAddress")', function() {
      // verify property exists
      expect(instance).to.have.property('destinationAddress');

      // set and verify value
      var validValue = generateMockData('Address');
      instance.destinationAddress = validValue;
      expect(instance.destinationAddress).to.equal(validValue);
    });

    it('should have the property deliveryPreferences (base name: "deliveryPreferences")', function() {
      // verify property exists
      expect(instance).to.have.property('deliveryPreferences');

      // set and verify value
      var validValue = generateMockData('DeliveryPreferences');
      instance.deliveryPreferences = validValue;
      expect(instance.deliveryPreferences).to.equal(validValue);
    });

    it('should have the property fulfillmentAction (base name: "fulfillmentAction")', function() {
      // verify property exists
      expect(instance).to.have.property('fulfillmentAction');

      // set and verify value
      var validValue = generateMockData('FulfillmentAction');
      instance.fulfillmentAction = validValue;
      expect(instance.fulfillmentAction).to.equal(validValue);
    });

    it('should have the property fulfillmentPolicy (base name: "fulfillmentPolicy")', function() {
      // verify property exists
      expect(instance).to.have.property('fulfillmentPolicy');

      // set and verify value
      var validValue = generateMockData('FulfillmentPolicy');
      instance.fulfillmentPolicy = validValue;
      expect(instance.fulfillmentPolicy).to.equal(validValue);
    });

    it('should have the property codSettings (base name: "codSettings")', function() {
      // verify property exists
      expect(instance).to.have.property('codSettings');

      // set and verify value
      var validValue = generateMockData('CODSettings');
      instance.codSettings = validValue;
      expect(instance.codSettings).to.equal(validValue);
    });

    it('should have the property shipFromCountryCode (base name: "shipFromCountryCode")', function() {
      // verify property exists
      expect(instance).to.have.property('shipFromCountryCode');

      // set and verify value
      var validValue = generateMockData('String');
      instance.shipFromCountryCode = validValue;
      expect(instance.shipFromCountryCode).to.equal(validValue);
    });

    it('should have the property notificationEmails (base name: "notificationEmails")', function() {
      // verify property exists
      expect(instance).to.have.property('notificationEmails');

      // set and verify value
      var validValue = generateMockData('[String]', true);
      instance.notificationEmails = validValue;
      expect(instance.notificationEmails).to.equal(validValue);
    });

    it('should have the property featureConstraints (base name: "featureConstraints")', function() {
      // verify property exists
      expect(instance).to.have.property('featureConstraints');

      // set and verify value
      var validValue = generateMockData('[FeatureSettings]', true);
      instance.featureConstraints = validValue;
      expect(instance.featureConstraints).to.equal(validValue);
    });

    it('should have the property items (base name: "items")', function() {
      // verify property exists
      expect(instance).to.have.property('items');

      // set and verify value
      var validValue = generateMockData('[CreateFulfillmentOrderItem]', true);
      instance.items = validValue;
      expect(instance.items).to.equal(validValue);
    });

    it('should have the property paymentInformation (base name: "paymentInformation")', function() {
      // verify property exists
      expect(instance).to.have.property('paymentInformation');

      // set and verify value
      var validValue = generateMockData('[PaymentInformation]', true);
      instance.paymentInformation = validValue;
      expect(instance.paymentInformation).to.equal(validValue);
    });

  });

  // Helper function to generate random test data
  function generateMockData(dataType, isArray = false) {
    if (!dataType) return {};

    // Handle array types
    if (isArray) {
      return [generateMockData(dataType), generateMockData(dataType)];
    }

    switch(dataType) {
      case 'String':
        return 'mock-' + Math.random().toString(36).substring(2, 10);
      case 'Number':
        return Math.floor(Math.random() * 1000);
      case 'Boolean':
        return Math.random() > 0.5;
      case 'Date':
        return new Date().toISOString();
      default:
        try {
          const ModelClass = SellingPartnerApisForFulfillmentOutbound[dataType];
          if (ModelClass) {
            const instance = Object.create(ModelClass.prototype);
            return instance;
          }
        } catch (e) {
          console.error("Error creating instance of", dataType);
          return {};
        }
        return {};
    }
  }

}));
