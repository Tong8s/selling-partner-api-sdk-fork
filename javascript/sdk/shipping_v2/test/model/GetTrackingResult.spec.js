/**
 * Amazon Shipping API
 * The Amazon Shipping API is designed to support outbound shipping use cases both for orders originating on Amazon-owned marketplaces as well as external channels/marketplaces. With these APIs, you can request shipping rates, create shipments, cancel shipments, and track shipments.
 *
 * The version of the OpenAPI document: v2
 * Contact: swa-api-core@amazon.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.AmazonShippingApi);
  }
}(this, function(expect, AmazonShippingApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    try{
     instance = new AmazonShippingApi.GetTrackingResult();
    } catch (e) {
     //Handle the cases when this model extends another model by using Model.call(this);
     instance = Object.create(AmazonShippingApi.GetTrackingResult.prototype);
    }
  });

  afterEach(function() {
    instance = null;
  })

  describe('GetTrackingResult', function() {
    it('should create an instance of GetTrackingResult', function() {
      expect(instance).to.be.a(AmazonShippingApi.GetTrackingResult);
    });

    it('should have the property trackingId (base name: "trackingId")', function() {
      // verify property exists
      expect(instance).to.have.property('trackingId');

      // set and verify value
      var validValue = generateMockData('String');
      instance.trackingId = validValue;
      expect(instance.trackingId).to.equal(validValue);
    });

    it('should have the property alternateLegTrackingId (base name: "alternateLegTrackingId")', function() {
      // verify property exists
      expect(instance).to.have.property('alternateLegTrackingId');

      // set and verify value
      var validValue = generateMockData('String');
      instance.alternateLegTrackingId = validValue;
      expect(instance.alternateLegTrackingId).to.equal(validValue);
    });

    it('should have the property eventHistory (base name: "eventHistory")', function() {
      // verify property exists
      expect(instance).to.have.property('eventHistory');

      // set and verify value
      var validValue = generateMockData('[Event]', true);
      instance.eventHistory = validValue;
      expect(instance.eventHistory).to.equal(validValue);
    });

    it('should have the property promisedDeliveryDate (base name: "promisedDeliveryDate")', function() {
      // verify property exists
      expect(instance).to.have.property('promisedDeliveryDate');

      // set and verify value
      var validValue = generateMockData('Date');
      instance.promisedDeliveryDate = validValue;
      expect(instance.promisedDeliveryDate).to.equal(validValue);
    });

    it('should have the property summary (base name: "summary")', function() {
      // verify property exists
      expect(instance).to.have.property('summary');

      // set and verify value
      var validValue = generateMockData('TrackingSummary');
      instance.summary = validValue;
      expect(instance.summary).to.equal(validValue);
    });

  });

  // Helper function to generate random test data
  function generateMockData(dataType, isArray = false) {
    if (!dataType) return {};

    // Handle array types
    if (isArray) {
      return [generateMockData(dataType), generateMockData(dataType)];
    }

    switch(dataType) {
      case 'String':
        return 'mock-' + Math.random().toString(36).substring(2, 10);
      case 'Number':
        return Math.floor(Math.random() * 1000);
      case 'Boolean':
        return Math.random() > 0.5;
      case 'Date':
        return new Date().toISOString();
      default:
        try {
          const ModelClass = AmazonShippingApi[dataType];
          if (ModelClass) {
            const instance = Object.create(ModelClass.prototype);
            return instance;
          }
        } catch (e) {
          console.error("Error creating instance of", dataType);
          return {};
        }
        return {};
    }
  }

}));
