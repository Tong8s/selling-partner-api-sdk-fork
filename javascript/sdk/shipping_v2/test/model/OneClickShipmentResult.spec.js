/**
 * Amazon Shipping API
 * The Amazon Shipping API is designed to support outbound shipping use cases both for orders originating on Amazon-owned marketplaces as well as external channels/marketplaces. With these APIs, you can request shipping rates, create shipments, cancel shipments, and track shipments.
 *
 * The version of the OpenAPI document: v2
 * Contact: swa-api-core@amazon.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.AmazonShippingApi);
  }
}(this, function(expect, AmazonShippingApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    try{
     instance = new AmazonShippingApi.OneClickShipmentResult();
    } catch (e) {
     //Handle the cases when this model extends another model by using Model.call(this);
     instance = Object.create(AmazonShippingApi.OneClickShipmentResult.prototype);
    }
  });

  afterEach(function() {
    instance = null;
  })

  describe('OneClickShipmentResult', function() {
    it('should create an instance of OneClickShipmentResult', function() {
      expect(instance).to.be.a(AmazonShippingApi.OneClickShipmentResult);
    });

    it('should have the property shipmentId', function() {
      // verify property exists
      expect(instance).to.have.property('shipmentId');

      // set and verify value
      var expectedValue = generateMockData('String');
      instance.shipmentId = expectedValue;
      expect(instance.shipmentId).to.equal(expectedValue);
    });

    it('should have the property packageDocumentDetails', function() {
      // verify property exists
      expect(instance).to.have.property('packageDocumentDetails');

      // set and verify value
      var expectedValue = generateMockData('PackageDocumentDetail', true);
      instance.packageDocumentDetails = expectedValue;
      expect(instance.packageDocumentDetails).to.equal(expectedValue);
    });

    it('should have the property promise', function() {
      // verify property exists
      expect(instance).to.have.property('promise');

      // set and verify value
      var expectedValue = generateMockData('Promise');
      instance.promise = expectedValue;
      expect(instance.promise).to.equal(expectedValue);
    });

    it('should have the property carrier', function() {
      // verify property exists
      expect(instance).to.have.property('carrier');

      // set and verify value
      var expectedValue = generateMockData('Carrier');
      instance.carrier = expectedValue;
      expect(instance.carrier).to.equal(expectedValue);
    });

    it('should have the property service', function() {
      // verify property exists
      expect(instance).to.have.property('service');

      // set and verify value
      var expectedValue = generateMockData('Service');
      instance.service = expectedValue;
      expect(instance.service).to.equal(expectedValue);
    });

    it('should have the property totalCharge', function() {
      // verify property exists
      expect(instance).to.have.property('totalCharge');

      // set and verify value
      var expectedValue = generateMockData('Currency');
      instance.totalCharge = expectedValue;
      expect(instance.totalCharge).to.equal(expectedValue);
    });

  });

  // Helper function to generate random test data
  function generateMockData(dataType, isArray = false) {
    if (!dataType) return {};

    // Handle array types
    if (isArray) {
      return [generateMockData(dataType), generateMockData(dataType)];
    }

    switch(dataType) {
      case 'String':
        return 'mock-' + Math.random().toString(36).substring(2, 10);
      case 'Number':
        return Math.floor(Math.random() * 1000);
      case 'Boolean':
        return Math.random() > 0.5;
      case 'Date':
        return new Date().toISOString();
      default:
        try {
          const ModelClass = AmazonShippingApi[dataType];
          if (ModelClass) {
            const instance = Object.create(ModelClass.prototype);
            return instance;
          }
        } catch (e) {
          console.error("Error creating instance of", dataType);
          return {};
        }
        return {};
    }
  }

}));
