/**
 * Selling Partner API for Orders
 * Use the Orders Selling Partner API to programmatically retrieve order information. With this API, you can develop fast, flexible, and custom applications to manage order synchronization, perform order research, and create demand-based decision support tools.   _Note:_ For the JP, AU, and SG marketplaces, the Orders API supports orders from 2016 onward. For all other marketplaces, the Orders API supports orders for the last two years (orders older than this don't show up in the response).
 *
 * The version of the OpenAPI document: v0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.SellingPartnerApiForOrders);
  }
}(this, function(expect, SellingPartnerApiForOrders) {
  'use strict';

  var instance;

  beforeEach(function() {
    try{
     instance = new SellingPartnerApiForOrders.Order();
    } catch (e) {
     //Handle the cases when this model extends another model by using Model.call(this);
     instance = Object.create(SellingPartnerApiForOrders.Order.prototype);
    }
  });

  afterEach(function() {
    instance = null;
  })

  describe('Order', function() {
    it('should create an instance of Order', function() {
      expect(instance).to.be.a(SellingPartnerApiForOrders.Order);
    });

    it('should have the property amazonOrderId (base name: "AmazonOrderId")', function() {
      // verify property exists
      expect(instance).to.have.property('amazonOrderId');

      // set and verify value
      var validValue = generateMockData('String');
      instance.amazonOrderId = validValue;
      expect(instance.amazonOrderId).to.equal(validValue);
    });

    it('should have the property sellerOrderId (base name: "SellerOrderId")', function() {
      // verify property exists
      expect(instance).to.have.property('sellerOrderId');

      // set and verify value
      var validValue = generateMockData('String');
      instance.sellerOrderId = validValue;
      expect(instance.sellerOrderId).to.equal(validValue);
    });

    it('should have the property purchaseDate (base name: "PurchaseDate")', function() {
      // verify property exists
      expect(instance).to.have.property('purchaseDate');

      // set and verify value
      var validValue = generateMockData('String');
      instance.purchaseDate = validValue;
      expect(instance.purchaseDate).to.equal(validValue);
    });

    it('should have the property lastUpdateDate (base name: "LastUpdateDate")', function() {
      // verify property exists
      expect(instance).to.have.property('lastUpdateDate');

      // set and verify value
      var validValue = generateMockData('String');
      instance.lastUpdateDate = validValue;
      expect(instance.lastUpdateDate).to.equal(validValue);
    });

    it('should have the property orderStatus (base name: "OrderStatus")', function() {
      // verify property exists
      expect(instance).to.have.property('orderStatus');

      // set and verify value
      var validValue = ['Pending', 'Unshipped', 'PartiallyShipped', 'Shipped', 'Canceled', 'Unfulfillable', 'InvoiceUnconfirmed', 'PendingAvailability', ][0];
      instance.orderStatus = validValue;
      expect(instance.orderStatus).to.equal(validValue);
    });

    it('should have the property fulfillmentChannel (base name: "FulfillmentChannel")', function() {
      // verify property exists
      expect(instance).to.have.property('fulfillmentChannel');

      // set and verify value
      var validValue = ['MFN', 'AFN', ][0];
      instance.fulfillmentChannel = validValue;
      expect(instance.fulfillmentChannel).to.equal(validValue);
    });

    it('should have the property salesChannel (base name: "SalesChannel")', function() {
      // verify property exists
      expect(instance).to.have.property('salesChannel');

      // set and verify value
      var validValue = generateMockData('String');
      instance.salesChannel = validValue;
      expect(instance.salesChannel).to.equal(validValue);
    });

    it('should have the property orderChannel (base name: "OrderChannel")', function() {
      // verify property exists
      expect(instance).to.have.property('orderChannel');

      // set and verify value
      var validValue = generateMockData('String');
      instance.orderChannel = validValue;
      expect(instance.orderChannel).to.equal(validValue);
    });

    it('should have the property shipServiceLevel (base name: "ShipServiceLevel")', function() {
      // verify property exists
      expect(instance).to.have.property('shipServiceLevel');

      // set and verify value
      var validValue = generateMockData('String');
      instance.shipServiceLevel = validValue;
      expect(instance.shipServiceLevel).to.equal(validValue);
    });

    it('should have the property orderTotal (base name: "OrderTotal")', function() {
      // verify property exists
      expect(instance).to.have.property('orderTotal');

      // set and verify value
      var validValue = generateMockData('Money');
      instance.orderTotal = validValue;
      expect(instance.orderTotal).to.equal(validValue);
    });

    it('should have the property numberOfItemsShipped (base name: "NumberOfItemsShipped")', function() {
      // verify property exists
      expect(instance).to.have.property('numberOfItemsShipped');

      // set and verify value
      var validValue = generateMockData('Number');
      instance.numberOfItemsShipped = validValue;
      expect(instance.numberOfItemsShipped).to.equal(validValue);
    });

    it('should have the property numberOfItemsUnshipped (base name: "NumberOfItemsUnshipped")', function() {
      // verify property exists
      expect(instance).to.have.property('numberOfItemsUnshipped');

      // set and verify value
      var validValue = generateMockData('Number');
      instance.numberOfItemsUnshipped = validValue;
      expect(instance.numberOfItemsUnshipped).to.equal(validValue);
    });

    it('should have the property paymentExecutionDetail (base name: "PaymentExecutionDetail")', function() {
      // verify property exists
      expect(instance).to.have.property('paymentExecutionDetail');

      // set and verify value
      var validValue = generateMockData('[PaymentExecutionDetailItem]', true);
      instance.paymentExecutionDetail = validValue;
      expect(instance.paymentExecutionDetail).to.equal(validValue);
    });

    it('should have the property paymentMethod (base name: "PaymentMethod")', function() {
      // verify property exists
      expect(instance).to.have.property('paymentMethod');

      // set and verify value
      var validValue = ['COD', 'CVS', 'Other', ][0];
      instance.paymentMethod = validValue;
      expect(instance.paymentMethod).to.equal(validValue);
    });

    it('should have the property paymentMethodDetails (base name: "PaymentMethodDetails")', function() {
      // verify property exists
      expect(instance).to.have.property('paymentMethodDetails');

      // set and verify value
      var validValue = generateMockData('[String]', true);
      instance.paymentMethodDetails = validValue;
      expect(instance.paymentMethodDetails).to.equal(validValue);
    });

    it('should have the property marketplaceId (base name: "MarketplaceId")', function() {
      // verify property exists
      expect(instance).to.have.property('marketplaceId');

      // set and verify value
      var validValue = generateMockData('String');
      instance.marketplaceId = validValue;
      expect(instance.marketplaceId).to.equal(validValue);
    });

    it('should have the property shipmentServiceLevelCategory (base name: "ShipmentServiceLevelCategory")', function() {
      // verify property exists
      expect(instance).to.have.property('shipmentServiceLevelCategory');

      // set and verify value
      var validValue = generateMockData('String');
      instance.shipmentServiceLevelCategory = validValue;
      expect(instance.shipmentServiceLevelCategory).to.equal(validValue);
    });

    it('should have the property easyShipShipmentStatus (base name: "EasyShipShipmentStatus")', function() {
      // verify property exists
      expect(instance).to.have.property('easyShipShipmentStatus');

      // set and verify value
      var validValue = generateMockData('EasyShipShipmentStatus');
      instance.easyShipShipmentStatus = validValue;
      expect(instance.easyShipShipmentStatus).to.equal(validValue);
    });

    it('should have the property cbaDisplayableShippingLabel (base name: "CbaDisplayableShippingLabel")', function() {
      // verify property exists
      expect(instance).to.have.property('cbaDisplayableShippingLabel');

      // set and verify value
      var validValue = generateMockData('String');
      instance.cbaDisplayableShippingLabel = validValue;
      expect(instance.cbaDisplayableShippingLabel).to.equal(validValue);
    });

    it('should have the property orderType (base name: "OrderType")', function() {
      // verify property exists
      expect(instance).to.have.property('orderType');

      // set and verify value
      var validValue = ['StandardOrder', 'LongLeadTimeOrder', 'Preorder', 'BackOrder', 'SourcingOnDemandOrder', ][0];
      instance.orderType = validValue;
      expect(instance.orderType).to.equal(validValue);
    });

    it('should have the property earliestShipDate (base name: "EarliestShipDate")', function() {
      // verify property exists
      expect(instance).to.have.property('earliestShipDate');

      // set and verify value
      var validValue = generateMockData('String');
      instance.earliestShipDate = validValue;
      expect(instance.earliestShipDate).to.equal(validValue);
    });

    it('should have the property latestShipDate (base name: "LatestShipDate")', function() {
      // verify property exists
      expect(instance).to.have.property('latestShipDate');

      // set and verify value
      var validValue = generateMockData('String');
      instance.latestShipDate = validValue;
      expect(instance.latestShipDate).to.equal(validValue);
    });

    it('should have the property earliestDeliveryDate (base name: "EarliestDeliveryDate")', function() {
      // verify property exists
      expect(instance).to.have.property('earliestDeliveryDate');

      // set and verify value
      var validValue = generateMockData('String');
      instance.earliestDeliveryDate = validValue;
      expect(instance.earliestDeliveryDate).to.equal(validValue);
    });

    it('should have the property latestDeliveryDate (base name: "LatestDeliveryDate")', function() {
      // verify property exists
      expect(instance).to.have.property('latestDeliveryDate');

      // set and verify value
      var validValue = generateMockData('String');
      instance.latestDeliveryDate = validValue;
      expect(instance.latestDeliveryDate).to.equal(validValue);
    });

    it('should have the property isBusinessOrder (base name: "IsBusinessOrder")', function() {
      // verify property exists
      expect(instance).to.have.property('isBusinessOrder');

      // set and verify value
      var validValue = generateMockData('Boolean');
      instance.isBusinessOrder = validValue;
      expect(instance.isBusinessOrder).to.equal(validValue);
    });

    it('should have the property isPrime (base name: "IsPrime")', function() {
      // verify property exists
      expect(instance).to.have.property('isPrime');

      // set and verify value
      var validValue = generateMockData('Boolean');
      instance.isPrime = validValue;
      expect(instance.isPrime).to.equal(validValue);
    });

    it('should have the property isPremiumOrder (base name: "IsPremiumOrder")', function() {
      // verify property exists
      expect(instance).to.have.property('isPremiumOrder');

      // set and verify value
      var validValue = generateMockData('Boolean');
      instance.isPremiumOrder = validValue;
      expect(instance.isPremiumOrder).to.equal(validValue);
    });

    it('should have the property isGlobalExpressEnabled (base name: "IsGlobalExpressEnabled")', function() {
      // verify property exists
      expect(instance).to.have.property('isGlobalExpressEnabled');

      // set and verify value
      var validValue = generateMockData('Boolean');
      instance.isGlobalExpressEnabled = validValue;
      expect(instance.isGlobalExpressEnabled).to.equal(validValue);
    });

    it('should have the property replacedOrderId (base name: "ReplacedOrderId")', function() {
      // verify property exists
      expect(instance).to.have.property('replacedOrderId');

      // set and verify value
      var validValue = generateMockData('String');
      instance.replacedOrderId = validValue;
      expect(instance.replacedOrderId).to.equal(validValue);
    });

    it('should have the property isReplacementOrder (base name: "IsReplacementOrder")', function() {
      // verify property exists
      expect(instance).to.have.property('isReplacementOrder');

      // set and verify value
      var validValue = generateMockData('Boolean');
      instance.isReplacementOrder = validValue;
      expect(instance.isReplacementOrder).to.equal(validValue);
    });

    it('should have the property promiseResponseDueDate (base name: "PromiseResponseDueDate")', function() {
      // verify property exists
      expect(instance).to.have.property('promiseResponseDueDate');

      // set and verify value
      var validValue = generateMockData('String');
      instance.promiseResponseDueDate = validValue;
      expect(instance.promiseResponseDueDate).to.equal(validValue);
    });

    it('should have the property isEstimatedShipDateSet (base name: "IsEstimatedShipDateSet")', function() {
      // verify property exists
      expect(instance).to.have.property('isEstimatedShipDateSet');

      // set and verify value
      var validValue = generateMockData('Boolean');
      instance.isEstimatedShipDateSet = validValue;
      expect(instance.isEstimatedShipDateSet).to.equal(validValue);
    });

    it('should have the property isSoldByAB (base name: "IsSoldByAB")', function() {
      // verify property exists
      expect(instance).to.have.property('isSoldByAB');

      // set and verify value
      var validValue = generateMockData('Boolean');
      instance.isSoldByAB = validValue;
      expect(instance.isSoldByAB).to.equal(validValue);
    });

    it('should have the property isIBA (base name: "IsIBA")', function() {
      // verify property exists
      expect(instance).to.have.property('isIBA');

      // set and verify value
      var validValue = generateMockData('Boolean');
      instance.isIBA = validValue;
      expect(instance.isIBA).to.equal(validValue);
    });

    it('should have the property defaultShipFromLocationAddress (base name: "DefaultShipFromLocationAddress")', function() {
      // verify property exists
      expect(instance).to.have.property('defaultShipFromLocationAddress');

      // set and verify value
      var validValue = generateMockData('Address');
      instance.defaultShipFromLocationAddress = validValue;
      expect(instance.defaultShipFromLocationAddress).to.equal(validValue);
    });

    it('should have the property buyerInvoicePreference (base name: "BuyerInvoicePreference")', function() {
      // verify property exists
      expect(instance).to.have.property('buyerInvoicePreference');

      // set and verify value
      var validValue = ['INDIVIDUAL', 'BUSINESS', ][0];
      instance.buyerInvoicePreference = validValue;
      expect(instance.buyerInvoicePreference).to.equal(validValue);
    });

    it('should have the property buyerTaxInformation (base name: "BuyerTaxInformation")', function() {
      // verify property exists
      expect(instance).to.have.property('buyerTaxInformation');

      // set and verify value
      var validValue = generateMockData('BuyerTaxInformation');
      instance.buyerTaxInformation = validValue;
      expect(instance.buyerTaxInformation).to.equal(validValue);
    });

    it('should have the property fulfillmentInstruction (base name: "FulfillmentInstruction")', function() {
      // verify property exists
      expect(instance).to.have.property('fulfillmentInstruction');

      // set and verify value
      var validValue = generateMockData('FulfillmentInstruction');
      instance.fulfillmentInstruction = validValue;
      expect(instance.fulfillmentInstruction).to.equal(validValue);
    });

    it('should have the property isISPU (base name: "IsISPU")', function() {
      // verify property exists
      expect(instance).to.have.property('isISPU');

      // set and verify value
      var validValue = generateMockData('Boolean');
      instance.isISPU = validValue;
      expect(instance.isISPU).to.equal(validValue);
    });

    it('should have the property isAccessPointOrder (base name: "IsAccessPointOrder")', function() {
      // verify property exists
      expect(instance).to.have.property('isAccessPointOrder');

      // set and verify value
      var validValue = generateMockData('Boolean');
      instance.isAccessPointOrder = validValue;
      expect(instance.isAccessPointOrder).to.equal(validValue);
    });

    it('should have the property marketplaceTaxInfo (base name: "MarketplaceTaxInfo")', function() {
      // verify property exists
      expect(instance).to.have.property('marketplaceTaxInfo');

      // set and verify value
      var validValue = generateMockData('MarketplaceTaxInfo');
      instance.marketplaceTaxInfo = validValue;
      expect(instance.marketplaceTaxInfo).to.equal(validValue);
    });

    it('should have the property sellerDisplayName (base name: "SellerDisplayName")', function() {
      // verify property exists
      expect(instance).to.have.property('sellerDisplayName');

      // set and verify value
      var validValue = generateMockData('String');
      instance.sellerDisplayName = validValue;
      expect(instance.sellerDisplayName).to.equal(validValue);
    });

    it('should have the property shippingAddress (base name: "ShippingAddress")', function() {
      // verify property exists
      expect(instance).to.have.property('shippingAddress');

      // set and verify value
      var validValue = generateMockData('Address');
      instance.shippingAddress = validValue;
      expect(instance.shippingAddress).to.equal(validValue);
    });

    it('should have the property buyerInfo (base name: "BuyerInfo")', function() {
      // verify property exists
      expect(instance).to.have.property('buyerInfo');

      // set and verify value
      var validValue = generateMockData('BuyerInfo');
      instance.buyerInfo = validValue;
      expect(instance.buyerInfo).to.equal(validValue);
    });

    it('should have the property automatedShippingSettings (base name: "AutomatedShippingSettings")', function() {
      // verify property exists
      expect(instance).to.have.property('automatedShippingSettings');

      // set and verify value
      var validValue = generateMockData('AutomatedShippingSettings');
      instance.automatedShippingSettings = validValue;
      expect(instance.automatedShippingSettings).to.equal(validValue);
    });

    it('should have the property hasRegulatedItems (base name: "HasRegulatedItems")', function() {
      // verify property exists
      expect(instance).to.have.property('hasRegulatedItems');

      // set and verify value
      var validValue = generateMockData('Boolean');
      instance.hasRegulatedItems = validValue;
      expect(instance.hasRegulatedItems).to.equal(validValue);
    });

    it('should have the property electronicInvoiceStatus (base name: "ElectronicInvoiceStatus")', function() {
      // verify property exists
      expect(instance).to.have.property('electronicInvoiceStatus');

      // set and verify value
      var validValue = generateMockData('ElectronicInvoiceStatus');
      instance.electronicInvoiceStatus = validValue;
      expect(instance.electronicInvoiceStatus).to.equal(validValue);
    });

  });

  // Helper function to generate random test data
  function generateMockData(dataType, isArray = false) {
    if (!dataType) return {};

    // Handle array types
    if (isArray) {
      return [generateMockData(dataType), generateMockData(dataType)];
    }

    switch(dataType) {
      case 'String':
        return 'mock-' + Math.random().toString(36).substring(2, 10);
      case 'Number':
        return Math.floor(Math.random() * 1000);
      case 'Boolean':
        return Math.random() > 0.5;
      case 'Date':
        return new Date().toISOString();
      default:
        try {
          const ModelClass = SellingPartnerApiForOrders[dataType];
          if (ModelClass) {
            const instance = Object.create(ModelClass.prototype);
            return instance;
          }
        } catch (e) {
          console.error("Error creating instance of", dataType);
          return {};
        }
        return {};
    }
  }

}));
