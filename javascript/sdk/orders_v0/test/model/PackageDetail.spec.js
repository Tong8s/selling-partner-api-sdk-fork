/**
 * Selling Partner API for Orders
 * Use the Orders Selling Partner API to programmatically retrieve order information. With this API, you can develop fast, flexible, and custom applications to manage order synchronization, perform order research, and create demand-based decision support tools.   _Note:_ For the JP, AU, and SG marketplaces, the Orders API supports orders from 2016 onward. For all other marketplaces, the Orders API supports orders for the last two years (orders older than this don't show up in the response).
 *
 * The version of the OpenAPI document: v0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.SellingPartnerApiForOrders);
  }
}(this, function(expect, SellingPartnerApiForOrders) {
  'use strict';

  var instance;

  beforeEach(function() {
    try{
     instance = new SellingPartnerApiForOrders.PackageDetail();
    } catch (e) {
     //Handle the cases when this model extends another model by using Model.call(this);
     instance = Object.create(SellingPartnerApiForOrders.PackageDetail.prototype);
    }
  });

  afterEach(function() {
    instance = null;
  })

  describe('PackageDetail', function() {
    it('should create an instance of PackageDetail', function() {
      expect(instance).to.be.a(SellingPartnerApiForOrders.PackageDetail);
    });

    it('should have the property packageReferenceId (base name: "packageReferenceId")', function() {
      // verify property exists
      expect(instance).to.have.property('packageReferenceId');

      // set and verify value
      var validValue = generateMockData('String');
      instance.packageReferenceId = validValue;
      expect(instance.packageReferenceId).to.equal(validValue);
    });

    it('should have the property carrierCode (base name: "carrierCode")', function() {
      // verify property exists
      expect(instance).to.have.property('carrierCode');

      // set and verify value
      var validValue = generateMockData('String');
      instance.carrierCode = validValue;
      expect(instance.carrierCode).to.equal(validValue);
    });

    it('should have the property carrierName (base name: "carrierName")', function() {
      // verify property exists
      expect(instance).to.have.property('carrierName');

      // set and verify value
      var validValue = generateMockData('String');
      instance.carrierName = validValue;
      expect(instance.carrierName).to.equal(validValue);
    });

    it('should have the property shippingMethod (base name: "shippingMethod")', function() {
      // verify property exists
      expect(instance).to.have.property('shippingMethod');

      // set and verify value
      var validValue = generateMockData('String');
      instance.shippingMethod = validValue;
      expect(instance.shippingMethod).to.equal(validValue);
    });

    it('should have the property trackingNumber (base name: "trackingNumber")', function() {
      // verify property exists
      expect(instance).to.have.property('trackingNumber');

      // set and verify value
      var validValue = generateMockData('String');
      instance.trackingNumber = validValue;
      expect(instance.trackingNumber).to.equal(validValue);
    });

    it('should have the property shipDate (base name: "shipDate")', function() {
      // verify property exists
      expect(instance).to.have.property('shipDate');

      // set and verify value
      var validValue = generateMockData('Date');
      instance.shipDate = validValue;
      expect(instance.shipDate).to.equal(validValue);
    });

    it('should have the property shipFromSupplySourceId (base name: "shipFromSupplySourceId")', function() {
      // verify property exists
      expect(instance).to.have.property('shipFromSupplySourceId');

      // set and verify value
      var validValue = generateMockData('String');
      instance.shipFromSupplySourceId = validValue;
      expect(instance.shipFromSupplySourceId).to.equal(validValue);
    });

    it('should have the property orderItems (base name: "orderItems")', function() {
      // verify property exists
      expect(instance).to.have.property('orderItems');

      // set and verify value
      var validValue = generateMockData('[ConfirmShipmentOrderItem]', true);
      instance.orderItems = validValue;
      expect(instance.orderItems).to.equal(validValue);
    });

  });

  // Helper function to generate random test data
  function generateMockData(dataType, isArray = false) {
    if (!dataType) return {};

    // Handle array types
    if (isArray) {
      return [generateMockData(dataType), generateMockData(dataType)];
    }

    switch(dataType) {
      case 'String':
        return 'mock-' + Math.random().toString(36).substring(2, 10);
      case 'Number':
        return Math.floor(Math.random() * 1000);
      case 'Boolean':
        return Math.random() > 0.5;
      case 'Date':
        return new Date().toISOString();
      default:
        try {
          const ModelClass = SellingPartnerApiForOrders[dataType];
          if (ModelClass) {
            const instance = Object.create(ModelClass.prototype);
            return instance;
          }
        } catch (e) {
          console.error("Error creating instance of", dataType);
          return {};
        }
        return {};
    }
  }

}));
