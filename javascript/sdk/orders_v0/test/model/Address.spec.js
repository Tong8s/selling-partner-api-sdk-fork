/**
 * Selling Partner API for Orders
 * Use the Orders Selling Partner API to programmatically retrieve order information. With this API, you can develop fast, flexible, and custom applications to manage order synchronization, perform order research, and create demand-based decision support tools.   _Note:_ For the JP, AU, and SG marketplaces, the Orders API supports orders from 2016 onward. For all other marketplaces, the Orders API supports orders for the last two years (orders older than this don't show up in the response).
 *
 * The version of the OpenAPI document: v0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.SellingPartnerApiForOrders);
  }
}(this, function(expect, SellingPartnerApiForOrders) {
  'use strict';

  var instance;

  beforeEach(function() {
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('Address', function() {
    it('should create an instance of Address', function() {
      // uncomment below and update the code to test Address
      //var instance = new SellingPartnerApiForOrders.Address();
      //expect(instance).to.be.a(SellingPartnerApiForOrders.Address);
    });

    it('should have the property name (base name: "Name")', function() {
      // uncomment below and update the code to test the property name
      //var instance = new SellingPartnerApiForOrders.Address();
      //expect(instance).to.be();
    });

    it('should have the property companyName (base name: "CompanyName")', function() {
      // uncomment below and update the code to test the property companyName
      //var instance = new SellingPartnerApiForOrders.Address();
      //expect(instance).to.be();
    });

    it('should have the property addressLine1 (base name: "AddressLine1")', function() {
      // uncomment below and update the code to test the property addressLine1
      //var instance = new SellingPartnerApiForOrders.Address();
      //expect(instance).to.be();
    });

    it('should have the property addressLine2 (base name: "AddressLine2")', function() {
      // uncomment below and update the code to test the property addressLine2
      //var instance = new SellingPartnerApiForOrders.Address();
      //expect(instance).to.be();
    });

    it('should have the property addressLine3 (base name: "AddressLine3")', function() {
      // uncomment below and update the code to test the property addressLine3
      //var instance = new SellingPartnerApiForOrders.Address();
      //expect(instance).to.be();
    });

    it('should have the property city (base name: "City")', function() {
      // uncomment below and update the code to test the property city
      //var instance = new SellingPartnerApiForOrders.Address();
      //expect(instance).to.be();
    });

    it('should have the property county (base name: "County")', function() {
      // uncomment below and update the code to test the property county
      //var instance = new SellingPartnerApiForOrders.Address();
      //expect(instance).to.be();
    });

    it('should have the property district (base name: "District")', function() {
      // uncomment below and update the code to test the property district
      //var instance = new SellingPartnerApiForOrders.Address();
      //expect(instance).to.be();
    });

    it('should have the property stateOrRegion (base name: "StateOrRegion")', function() {
      // uncomment below and update the code to test the property stateOrRegion
      //var instance = new SellingPartnerApiForOrders.Address();
      //expect(instance).to.be();
    });

    it('should have the property municipality (base name: "Municipality")', function() {
      // uncomment below and update the code to test the property municipality
      //var instance = new SellingPartnerApiForOrders.Address();
      //expect(instance).to.be();
    });

    it('should have the property postalCode (base name: "PostalCode")', function() {
      // uncomment below and update the code to test the property postalCode
      //var instance = new SellingPartnerApiForOrders.Address();
      //expect(instance).to.be();
    });

    it('should have the property countryCode (base name: "CountryCode")', function() {
      // uncomment below and update the code to test the property countryCode
      //var instance = new SellingPartnerApiForOrders.Address();
      //expect(instance).to.be();
    });

    it('should have the property phone (base name: "Phone")', function() {
      // uncomment below and update the code to test the property phone
      //var instance = new SellingPartnerApiForOrders.Address();
      //expect(instance).to.be();
    });

    it('should have the property extendedFields (base name: "ExtendedFields")', function() {
      // uncomment below and update the code to test the property extendedFields
      //var instance = new SellingPartnerApiForOrders.Address();
      //expect(instance).to.be();
    });

    it('should have the property addressType (base name: "AddressType")', function() {
      // uncomment below and update the code to test the property addressType
      //var instance = new SellingPartnerApiForOrders.Address();
      //expect(instance).to.be();
    });

  });

}));