/**
 * Selling Partner API for Orders
 * Use the Orders Selling Partner API to programmatically retrieve order information. With this API, you can develop fast, flexible, and custom applications to manage order synchronization, perform order research, and create demand-based decision support tools.   _Note:_ For the JP, AU, and SG marketplaces, the Orders API supports orders from 2016 onward. For all other marketplaces, the Orders API supports orders for the last two years (orders older than this don't show up in the response).
 *
 * The version of the OpenAPI document: v0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', 'sinon', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('sinon'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.sinon, root.SellingPartnerApiForOrders);
  }
}(this, function(expect, sinon, SellingPartnerApiForOrders) {
  'use strict';

  var instance;
  var sandbox;
  const testEndpoint = 'https://localhost:3000';
  const testAccessToken = "testAccessToken";

  // Helper function to generate random test data
  function generateMockData(dataType, isArray = false) {
    if (!dataType) return {};

    // Handle array types
    if (isArray) {
      return [generateMockData(dataType), generateMockData(dataType)];
    }

    switch(dataType) {
      case 'String':
        return 'mock-' + Math.random().toString(36).substring(2, 10);
      case 'Number':
        return Math.floor(Math.random() * 1000);
      case 'Boolean':
        return Math.random() > 0.5;
      case 'Date':
        return new Date().toISOString();
      default:
        try {
          const ModelClass = SellingPartnerApiForOrders[dataType];
          if (ModelClass) {
            const instance = Object.create(ModelClass.prototype);
            if (ModelClass.RequiredProperties) {
              ModelClass.RequiredProperties.forEach(prop => {
                const propType = ModelClass.types[prop];
                instance[prop] = generateMockData(propType);
              });
            }
            return instance;
          }
        } catch (e) {
          console.error("Error creating instance of", dataType);
          return {};
        }
        return {};
    }
  }
  

// Generate mock requests and responses for each operation
const mockupdateShipmentStatusData = {
  request: {
    'orderId': generateMockData('String'),
    'payload': generateMockData('UpdateShipmentStatusRequest')
  },
  response: {
    statusCode: 204,
    headers: {}
  }
};

  beforeEach(function() {
    sandbox = sinon.createSandbox();
    var apiClientInstance = new SellingPartnerApiForOrders.ApiClient(testEndpoint);
    apiClientInstance.applyXAmzAccessTokenToRequest(testAccessToken);
    sandbox.stub(apiClientInstance, 'callApi');
    instance = new SellingPartnerApiForOrders.ShipmentApi(apiClientInstance);
  });

  afterEach(function() {
    sandbox.restore();
  });

  describe('ShipmentApi', function() {
    describe('updateShipmentStatus', function() {
      
      it('should successfully call updateShipmentStatus', function(done) {
        instance.apiClient.callApi.resolves(mockupdateShipmentStatusData.response);

        const params = [
          mockupdateShipmentStatusData.request['orderId'],
          mockupdateShipmentStatusData.request['payload']
        ];
        instance.updateShipmentStatus(...params)
          .then(function(data) {
            expect(data).to.be.undefined;
            done();
          })
          .catch(done);
      });

      it('should successfully call updateShipmentStatusWithHttpInfo', function(done) {
        instance.apiClient.callApi.resolves(mockupdateShipmentStatusData.response);

        const params = [
          mockupdateShipmentStatusData.request['orderId'],
          mockupdateShipmentStatusData.request['payload']
        ];
        instance.updateShipmentStatusWithHttpInfo(...params)
          .then(function(response) {
            expect(response).to.have.property('statusCode');
            expect(response.statusCode).to.equal(mockupdateShipmentStatusData.response.statusCode)
            expect(response).to.have.property('headers');
            done();
          })
          .catch(done);
      });

      it('should handle API errors', function(done) {
        var errorResponse = {
          errors: new Error('Expected error to be thrown'),
          statusCode: 400,
          headers: {}
        };
        instance.apiClient.callApi.rejects(errorResponse);

        const params = [
          mockupdateShipmentStatusData.request['orderId'],
          mockupdateShipmentStatusData.request['payload']
        ];
        instance.updateShipmentStatus(...params)
          .then(function() {
            done(new Error('Expected error to be thrown'));
          })
          .catch(function(error) {
            expect(error).to.exist;
            expect(error.statusCode).to.equal(400)
            done();
          });
      });
    });

    describe('constructor', function() {
      it('should use default ApiClient when none provided', function() {
        var defaultInstance = new SellingPartnerApiForOrders.ShipmentApi();
        expect(defaultInstance.apiClient).to.equal(SellingPartnerApiForOrders.ApiClient.instance);
      });

      it('should use provided ApiClient', function() {
        var customClient = new SellingPartnerApiForOrders.ApiClient();
        var customInstance = new SellingPartnerApiForOrders.ShipmentApi(customClient);
        expect(customInstance.apiClient).to.equal(customClient);
      });
    });
  });
}));
