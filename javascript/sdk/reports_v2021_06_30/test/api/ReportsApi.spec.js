/**
 * Selling Partner API for Reports
 * The Selling Partner API for Reports lets you retrieve and manage a variety of reports that can help selling partners manage their businesses.
 *
 * The version of the OpenAPI document: 2021-06-30
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', 'sinon', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('sinon'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.sinon, root.SellingPartnerApiForReports);
  }
}(this, function(expect, sinon, SellingPartnerApiForReports) {
  'use strict';

  var instance;
  var sandbox;
  const testEndpoint = 'https://localhost:3000';
  const testAccessToken = "testAccessToken";

  // Helper function to generate random test data
  function generateMockData(dataType, isArray = false) {
    if (!dataType) return {};

    // Handle array types
    if (isArray) {
      return [generateMockData(dataType), generateMockData(dataType)];
    }

    switch(dataType) {
      case 'String':
        return 'mock-' + Math.random().toString(36).substring(2, 10);
      case 'Number':
        return Math.floor(Math.random() * 1000);
      case 'Boolean':
        return Math.random() > 0.5;
      case 'Date':
        return new Date().toISOString();
      default:
        try {
          const ModelClass = SellingPartnerApiForReports[dataType];
          if (ModelClass) {
            const instance = Object.create(ModelClass.prototype);
            if (ModelClass.RequiredProperties) {
              ModelClass.RequiredProperties.forEach(prop => {
                const propType = ModelClass.types[prop];
                instance[prop] = generateMockData(propType);
              });
            }
            return instance;
          }
        } catch (e) {
          console.error("Error creating instance of", dataType);
          return {};
        }
        return {};
    }
  }
  

// Generate mock requests and responses for each operation
const mockcancelReportData = {
  request: {
    'reportId': generateMockData('String')
  },
  response: {
    statusCode: 200,
    headers: {}
  }
};
const mockcancelReportScheduleData = {
  request: {
    'reportScheduleId': generateMockData('String')
  },
  response: {
    statusCode: 200,
    headers: {}
  }
};
const mockcreateReportData = {
  request: {
    'body': generateMockData('CreateReportSpecification')
  },
  response: {
    data: generateMockData('CreateReportResponse'),
    statusCode: 202,
    headers: {}
  }
};
const mockcreateReportScheduleData = {
  request: {
    'body': generateMockData('CreateReportScheduleSpecification')
  },
  response: {
    data: generateMockData('CreateReportScheduleResponse'),
    statusCode: 201,
    headers: {}
  }
};
const mockgetReportData = {
  request: {
    'reportId': generateMockData('String')
  },
  response: {
    data: generateMockData('Report'),
    statusCode: 200,
    headers: {}
  }
};
const mockgetReportDocumentData = {
  request: {
    'reportDocumentId': generateMockData('String')
  },
  response: {
    data: generateMockData('ReportDocument'),
    statusCode: 200,
    headers: {}
  }
};
const mockgetReportScheduleData = {
  request: {
    'reportScheduleId': generateMockData('String')
  },
  response: {
    data: generateMockData('ReportSchedule'),
    statusCode: 200,
    headers: {}
  }
};
const mockgetReportSchedulesData = {
  request: {
    'reportTypes': generateMockData('[String]', true)
  },
  response: {
    data: generateMockData('ReportScheduleList'),
    statusCode: 200,
    headers: {}
  }
};
const mockgetReportsData = {
  request: {
  },
  response: {
    data: generateMockData('GetReportsResponse'),
    statusCode: 200,
    headers: {}
  }
};

  beforeEach(function() {
    sandbox = sinon.createSandbox();
    var apiClientInstance = new SellingPartnerApiForReports.ApiClient(testEndpoint);
    apiClientInstance.applyXAmzAccessTokenToRequest(testAccessToken);
    sandbox.stub(apiClientInstance, 'callApi');
    instance = new SellingPartnerApiForReports.ReportsApi(apiClientInstance);
  });

  afterEach(function() {
    sandbox.restore();
  });

  describe('ReportsApi', function() {
    describe('cancelReport', function() {
      
      it('should successfully call cancelReport', function(done) {
        instance.apiClient.callApi.resolves(mockcancelReportData.response);

        const params = [
          mockcancelReportData.request['reportId']
        ];
        instance.cancelReport(...params)
          .then(function(data) {
            expect(data).to.be.undefined;
            done();
          })
          .catch(done);
      });

      it('should successfully call cancelReportWithHttpInfo', function(done) {
        instance.apiClient.callApi.resolves(mockcancelReportData.response);

        const params = [
          mockcancelReportData.request['reportId']
        ];
        instance.cancelReportWithHttpInfo(...params)
          .then(function(response) {
            expect(response).to.have.property('statusCode');
            expect(response.statusCode).to.equal(mockcancelReportData.response.statusCode)
            expect(response).to.have.property('headers');
            done();
          })
          .catch(done);
      });

      it('should handle API errors', function(done) {
        var errorResponse = {
          errors: new Error('Expected error to be thrown'),
          statusCode: 400,
          headers: {}
        };
        instance.apiClient.callApi.rejects(errorResponse);

        const params = [
          mockcancelReportData.request['reportId']
        ];
        instance.cancelReport(...params)
          .then(function() {
            done(new Error('Expected error to be thrown'));
          })
          .catch(function(error) {
            expect(error).to.exist;
            expect(error.statusCode).to.equal(400)
            done();
          });
      });
    });
    describe('cancelReportSchedule', function() {
      
      it('should successfully call cancelReportSchedule', function(done) {
        instance.apiClient.callApi.resolves(mockcancelReportScheduleData.response);

        const params = [
          mockcancelReportScheduleData.request['reportScheduleId']
        ];
        instance.cancelReportSchedule(...params)
          .then(function(data) {
            expect(data).to.be.undefined;
            done();
          })
          .catch(done);
      });

      it('should successfully call cancelReportScheduleWithHttpInfo', function(done) {
        instance.apiClient.callApi.resolves(mockcancelReportScheduleData.response);

        const params = [
          mockcancelReportScheduleData.request['reportScheduleId']
        ];
        instance.cancelReportScheduleWithHttpInfo(...params)
          .then(function(response) {
            expect(response).to.have.property('statusCode');
            expect(response.statusCode).to.equal(mockcancelReportScheduleData.response.statusCode)
            expect(response).to.have.property('headers');
            done();
          })
          .catch(done);
      });

      it('should handle API errors', function(done) {
        var errorResponse = {
          errors: new Error('Expected error to be thrown'),
          statusCode: 400,
          headers: {}
        };
        instance.apiClient.callApi.rejects(errorResponse);

        const params = [
          mockcancelReportScheduleData.request['reportScheduleId']
        ];
        instance.cancelReportSchedule(...params)
          .then(function() {
            done(new Error('Expected error to be thrown'));
          })
          .catch(function(error) {
            expect(error).to.exist;
            expect(error.statusCode).to.equal(400)
            done();
          });
      });
    });
    describe('createReport', function() {
      
      it('should successfully call createReport', function(done) {
        instance.apiClient.callApi.resolves(mockcreateReportData.response);

        const params = [
          mockcreateReportData.request['body']
        ];
        instance.createReport(...params)
          .then(function(data) {
            expect(data instanceof SellingPartnerApiForReports.CreateReportResponse).to.be.true;
            done();
          })
          .catch(done);
      });

      it('should successfully call createReportWithHttpInfo', function(done) {
        instance.apiClient.callApi.resolves(mockcreateReportData.response);

        const params = [
          mockcreateReportData.request['body']
        ];
        instance.createReportWithHttpInfo(...params)
          .then(function(response) {
            expect(response).to.have.property('statusCode');
            expect(response.statusCode).to.equal(mockcreateReportData.response.statusCode)
            expect(response).to.have.property('headers');
            expect(response).to.have.property('data');
            done();
          })
          .catch(done);
      });

      it('should handle API errors', function(done) {
        var errorResponse = {
          errors: new Error('Expected error to be thrown'),
          statusCode: 400,
          headers: {}
        };
        instance.apiClient.callApi.rejects(errorResponse);

        const params = [
          mockcreateReportData.request['body']
        ];
        instance.createReport(...params)
          .then(function() {
            done(new Error('Expected error to be thrown'));
          })
          .catch(function(error) {
            expect(error).to.exist;
            expect(error.statusCode).to.equal(400)
            done();
          });
      });
    });
    describe('createReportSchedule', function() {
      
      it('should successfully call createReportSchedule', function(done) {
        instance.apiClient.callApi.resolves(mockcreateReportScheduleData.response);

        const params = [
          mockcreateReportScheduleData.request['body']
        ];
        instance.createReportSchedule(...params)
          .then(function(data) {
            expect(data instanceof SellingPartnerApiForReports.CreateReportScheduleResponse).to.be.true;
            done();
          })
          .catch(done);
      });

      it('should successfully call createReportScheduleWithHttpInfo', function(done) {
        instance.apiClient.callApi.resolves(mockcreateReportScheduleData.response);

        const params = [
          mockcreateReportScheduleData.request['body']
        ];
        instance.createReportScheduleWithHttpInfo(...params)
          .then(function(response) {
            expect(response).to.have.property('statusCode');
            expect(response.statusCode).to.equal(mockcreateReportScheduleData.response.statusCode)
            expect(response).to.have.property('headers');
            expect(response).to.have.property('data');
            done();
          })
          .catch(done);
      });

      it('should handle API errors', function(done) {
        var errorResponse = {
          errors: new Error('Expected error to be thrown'),
          statusCode: 400,
          headers: {}
        };
        instance.apiClient.callApi.rejects(errorResponse);

        const params = [
          mockcreateReportScheduleData.request['body']
        ];
        instance.createReportSchedule(...params)
          .then(function() {
            done(new Error('Expected error to be thrown'));
          })
          .catch(function(error) {
            expect(error).to.exist;
            expect(error.statusCode).to.equal(400)
            done();
          });
      });
    });
    describe('getReport', function() {
      
      it('should successfully call getReport', function(done) {
        instance.apiClient.callApi.resolves(mockgetReportData.response);

        const params = [
          mockgetReportData.request['reportId']
        ];
        instance.getReport(...params)
          .then(function(data) {
            expect(data instanceof SellingPartnerApiForReports.Report).to.be.true;
            done();
          })
          .catch(done);
      });

      it('should successfully call getReportWithHttpInfo', function(done) {
        instance.apiClient.callApi.resolves(mockgetReportData.response);

        const params = [
          mockgetReportData.request['reportId']
        ];
        instance.getReportWithHttpInfo(...params)
          .then(function(response) {
            expect(response).to.have.property('statusCode');
            expect(response.statusCode).to.equal(mockgetReportData.response.statusCode)
            expect(response).to.have.property('headers');
            expect(response).to.have.property('data');
            done();
          })
          .catch(done);
      });

      it('should handle API errors', function(done) {
        var errorResponse = {
          errors: new Error('Expected error to be thrown'),
          statusCode: 400,
          headers: {}
        };
        instance.apiClient.callApi.rejects(errorResponse);

        const params = [
          mockgetReportData.request['reportId']
        ];
        instance.getReport(...params)
          .then(function() {
            done(new Error('Expected error to be thrown'));
          })
          .catch(function(error) {
            expect(error).to.exist;
            expect(error.statusCode).to.equal(400)
            done();
          });
      });
    });
    describe('getReportDocument', function() {
      
      it('should successfully call getReportDocument', function(done) {
        instance.apiClient.callApi.resolves(mockgetReportDocumentData.response);

        const params = [
          mockgetReportDocumentData.request['reportDocumentId']
        ];
        instance.getReportDocument(...params)
          .then(function(data) {
            expect(data instanceof SellingPartnerApiForReports.ReportDocument).to.be.true;
            done();
          })
          .catch(done);
      });

      it('should successfully call getReportDocumentWithHttpInfo', function(done) {
        instance.apiClient.callApi.resolves(mockgetReportDocumentData.response);

        const params = [
          mockgetReportDocumentData.request['reportDocumentId']
        ];
        instance.getReportDocumentWithHttpInfo(...params)
          .then(function(response) {
            expect(response).to.have.property('statusCode');
            expect(response.statusCode).to.equal(mockgetReportDocumentData.response.statusCode)
            expect(response).to.have.property('headers');
            expect(response).to.have.property('data');
            done();
          })
          .catch(done);
      });

      it('should handle API errors', function(done) {
        var errorResponse = {
          errors: new Error('Expected error to be thrown'),
          statusCode: 400,
          headers: {}
        };
        instance.apiClient.callApi.rejects(errorResponse);

        const params = [
          mockgetReportDocumentData.request['reportDocumentId']
        ];
        instance.getReportDocument(...params)
          .then(function() {
            done(new Error('Expected error to be thrown'));
          })
          .catch(function(error) {
            expect(error).to.exist;
            expect(error.statusCode).to.equal(400)
            done();
          });
      });
    });
    describe('getReportSchedule', function() {
      
      it('should successfully call getReportSchedule', function(done) {
        instance.apiClient.callApi.resolves(mockgetReportScheduleData.response);

        const params = [
          mockgetReportScheduleData.request['reportScheduleId']
        ];
        instance.getReportSchedule(...params)
          .then(function(data) {
            expect(data instanceof SellingPartnerApiForReports.ReportSchedule).to.be.true;
            done();
          })
          .catch(done);
      });

      it('should successfully call getReportScheduleWithHttpInfo', function(done) {
        instance.apiClient.callApi.resolves(mockgetReportScheduleData.response);

        const params = [
          mockgetReportScheduleData.request['reportScheduleId']
        ];
        instance.getReportScheduleWithHttpInfo(...params)
          .then(function(response) {
            expect(response).to.have.property('statusCode');
            expect(response.statusCode).to.equal(mockgetReportScheduleData.response.statusCode)
            expect(response).to.have.property('headers');
            expect(response).to.have.property('data');
            done();
          })
          .catch(done);
      });

      it('should handle API errors', function(done) {
        var errorResponse = {
          errors: new Error('Expected error to be thrown'),
          statusCode: 400,
          headers: {}
        };
        instance.apiClient.callApi.rejects(errorResponse);

        const params = [
          mockgetReportScheduleData.request['reportScheduleId']
        ];
        instance.getReportSchedule(...params)
          .then(function() {
            done(new Error('Expected error to be thrown'));
          })
          .catch(function(error) {
            expect(error).to.exist;
            expect(error.statusCode).to.equal(400)
            done();
          });
      });
    });
    describe('getReportSchedules', function() {
      
      it('should successfully call getReportSchedules', function(done) {
        instance.apiClient.callApi.resolves(mockgetReportSchedulesData.response);

        const params = [
          mockgetReportSchedulesData.request['reportTypes']
        ];
        instance.getReportSchedules(...params)
          .then(function(data) {
            expect(data instanceof SellingPartnerApiForReports.ReportScheduleList).to.be.true;
            done();
          })
          .catch(done);
      });

      it('should successfully call getReportSchedulesWithHttpInfo', function(done) {
        instance.apiClient.callApi.resolves(mockgetReportSchedulesData.response);

        const params = [
          mockgetReportSchedulesData.request['reportTypes']
        ];
        instance.getReportSchedulesWithHttpInfo(...params)
          .then(function(response) {
            expect(response).to.have.property('statusCode');
            expect(response.statusCode).to.equal(mockgetReportSchedulesData.response.statusCode)
            expect(response).to.have.property('headers');
            expect(response).to.have.property('data');
            done();
          })
          .catch(done);
      });

      it('should handle API errors', function(done) {
        var errorResponse = {
          errors: new Error('Expected error to be thrown'),
          statusCode: 400,
          headers: {}
        };
        instance.apiClient.callApi.rejects(errorResponse);

        const params = [
          mockgetReportSchedulesData.request['reportTypes']
        ];
        instance.getReportSchedules(...params)
          .then(function() {
            done(new Error('Expected error to be thrown'));
          })
          .catch(function(error) {
            expect(error).to.exist;
            expect(error.statusCode).to.equal(400)
            done();
          });
      });
    });
    describe('getReports', function() {
      
      it('should successfully call getReports', function(done) {
        instance.apiClient.callApi.resolves(mockgetReportsData.response);

        const params = [
        ];
        instance.getReports(...params)
          .then(function(data) {
            expect(data instanceof SellingPartnerApiForReports.GetReportsResponse).to.be.true;
            done();
          })
          .catch(done);
      });

      it('should successfully call getReportsWithHttpInfo', function(done) {
        instance.apiClient.callApi.resolves(mockgetReportsData.response);

        const params = [
        ];
        instance.getReportsWithHttpInfo(...params)
          .then(function(response) {
            expect(response).to.have.property('statusCode');
            expect(response.statusCode).to.equal(mockgetReportsData.response.statusCode)
            expect(response).to.have.property('headers');
            expect(response).to.have.property('data');
            done();
          })
          .catch(done);
      });

      it('should handle API errors', function(done) {
        var errorResponse = {
          errors: new Error('Expected error to be thrown'),
          statusCode: 400,
          headers: {}
        };
        instance.apiClient.callApi.rejects(errorResponse);

        const params = [
        ];
        instance.getReports(...params)
          .then(function() {
            done(new Error('Expected error to be thrown'));
          })
          .catch(function(error) {
            expect(error).to.exist;
            expect(error.statusCode).to.equal(400)
            done();
          });
      });
    });

    describe('constructor', function() {
      it('should use default ApiClient when none provided', function() {
        var defaultInstance = new SellingPartnerApiForReports.ReportsApi();
        expect(defaultInstance.apiClient).to.equal(SellingPartnerApiForReports.ApiClient.instance);
      });

      it('should use provided ApiClient', function() {
        var customClient = new SellingPartnerApiForReports.ApiClient();
        var customInstance = new SellingPartnerApiForReports.ReportsApi(customClient);
        expect(customInstance.apiClient).to.equal(customClient);
      });
    });
  });
}));
