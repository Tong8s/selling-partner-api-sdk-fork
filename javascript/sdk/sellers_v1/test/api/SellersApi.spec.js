/**
 * The Selling Partner API for Sellers
 * The [Selling Partner API for Sellers](https://developer-docs.amazon.com/sp-api/docs/sellers-api-v1-reference) (Sellers API) provides essential information about seller accounts, such as:  - The marketplaces a seller can list in - The default language and currency of a marketplace - Whether the seller has suspended listings  Refer to the [Sellers API reference](https://developer-docs.amazon.com/sp-api/docs/sellers-api-v1-reference) for details about this API's operations, data types, and schemas.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', 'sinon', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('sinon'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.sinon, root.TheSellingPartnerApiForSellers);
  }
}(this, function(expect, sinon, TheSellingPartnerApiForSellers) {
  'use strict';

  var instance;
  var sandbox;
  const testEndpoint = 'https://localhost:3000';
  const testAccessToken = "testAccessToken";

  // Helper function to generate random test data
  function generateMockData(dataType, isArray = false) {
    if (!dataType) return {};

    // Handle array types
    if (isArray) {
      return [generateMockData(dataType), generateMockData(dataType)];
    }

    switch(dataType) {
      case 'String':
        return 'mock-' + Math.random().toString(36).substring(2, 10);
      case 'Number':
        return Math.floor(Math.random() * 1000);
      case 'Boolean':
        return Math.random() > 0.5;
      case 'Date':
        return new Date().toISOString();
      default:
        try {
          const ModelClass = TheSellingPartnerApiForSellers[dataType];
          if (ModelClass) {
            const instance = Object.create(ModelClass.prototype);
            if (ModelClass.RequiredProperties) {
              ModelClass.RequiredProperties.forEach(prop => {
                const propType = ModelClass.types[prop];
                instance[prop] = generateMockData(propType);
              });
            }
            return instance;
          }
        } catch (e) {
          console.error("Error creating instance of", dataType);
          return {};
        }
        return {};
    }
  }
  

// Generate mock requests and responses for each operation
const mockgetAccountData = {
  request: {
  },
  response: {
    data: generateMockData('GetAccountResponse'),
    statusCode: 200,
    headers: {}
  }
};
const mockgetMarketplaceParticipationsData = {
  request: {
  },
  response: {
    data: generateMockData('GetMarketplaceParticipationsResponse'),
    statusCode: 200,
    headers: {}
  }
};

  beforeEach(function() {
    sandbox = sinon.createSandbox();
    var apiClientInstance = new TheSellingPartnerApiForSellers.ApiClient(testEndpoint);
    apiClientInstance.applyXAmzAccessTokenToRequest(testAccessToken);
    sandbox.stub(apiClientInstance, 'callApi');
    instance = new TheSellingPartnerApiForSellers.SellersApi(apiClientInstance);
  });

  afterEach(function() {
    sandbox.restore();
  });

  describe('SellersApi', function() {
    describe('getAccount', function() {
      
      it('should successfully call getAccount', function(done) {
        instance.apiClient.callApi.resolves(mockgetAccountData.response);

        instance.getAccount()
          .then(function(data) {
            expect(data instanceof TheSellingPartnerApiForSellers.GetAccountResponse).to.be.true;
            done();
          })
          .catch(done);
      });

      it('should successfully call getAccountWithHttpInfo', function(done) {
        instance.apiClient.callApi.resolves(mockgetAccountData.response);

        instance.getAccountWithHttpInfo()
          .then(function(response) {
            expect(response).to.have.property('statusCode');
            expect(response.statusCode).to.equal(mockgetAccountData.response.statusCode)
            expect(response).to.have.property('headers');
            expect(response).to.have.property('data');
            done();
          })
          .catch(done);
      });

      it('should handle API errors', function(done) {
        var errorResponse = {
          errors: new Error('Expected error to be thrown'),
          statusCode: 400,
          headers: {}
        };
        instance.apiClient.callApi.rejects(errorResponse);

        instance.getAccount()
          .then(function() {
            done(new Error('Expected error to be thrown'));
          })
          .catch(function(error) {
            expect(error).to.exist;
            expect(error.statusCode).to.equal(400)
            done();
          });
      });
    });
    describe('getMarketplaceParticipations', function() {
      
      it('should successfully call getMarketplaceParticipations', function(done) {
        instance.apiClient.callApi.resolves(mockgetMarketplaceParticipationsData.response);

        instance.getMarketplaceParticipations()
          .then(function(data) {
            expect(data instanceof TheSellingPartnerApiForSellers.GetMarketplaceParticipationsResponse).to.be.true;
            done();
          })
          .catch(done);
      });

      it('should successfully call getMarketplaceParticipationsWithHttpInfo', function(done) {
        instance.apiClient.callApi.resolves(mockgetMarketplaceParticipationsData.response);

        instance.getMarketplaceParticipationsWithHttpInfo()
          .then(function(response) {
            expect(response).to.have.property('statusCode');
            expect(response.statusCode).to.equal(mockgetMarketplaceParticipationsData.response.statusCode)
            expect(response).to.have.property('headers');
            expect(response).to.have.property('data');
            done();
          })
          .catch(done);
      });

      it('should handle API errors', function(done) {
        var errorResponse = {
          errors: new Error('Expected error to be thrown'),
          statusCode: 400,
          headers: {}
        };
        instance.apiClient.callApi.rejects(errorResponse);

        instance.getMarketplaceParticipations()
          .then(function() {
            done(new Error('Expected error to be thrown'));
          })
          .catch(function(error) {
            expect(error).to.exist;
            expect(error.statusCode).to.equal(400)
            done();
          });
      });
    });

    describe('constructor', function() {
      it('should use default ApiClient when none provided', function() {
        var defaultInstance = new TheSellingPartnerApiForSellers.SellersApi();
        expect(defaultInstance.apiClient).to.equal(TheSellingPartnerApiForSellers.ApiClient.instance);
      });

      it('should use provided ApiClient', function() {
        var customClient = new TheSellingPartnerApiForSellers.ApiClient();
        var customInstance = new TheSellingPartnerApiForSellers.SellersApi(customClient);
        expect(customInstance.apiClient).to.equal(customClient);
      });
    });
  });
}));
