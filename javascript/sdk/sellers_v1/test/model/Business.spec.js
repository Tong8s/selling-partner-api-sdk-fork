/**
 * The Selling Partner API for Sellers
 * The [Selling Partner API for Sellers](https://developer-docs.amazon.com/sp-api/docs/sellers-api-v1-reference) (Sellers API) provides essential information about seller accounts, such as:  - The marketplaces a seller can list in - The default language and currency of a marketplace - Whether the seller has suspended listings  Refer to the [Sellers API reference](https://developer-docs.amazon.com/sp-api/docs/sellers-api-v1-reference) for details about this API's operations, data types, and schemas.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.TheSellingPartnerApiForSellers);
  }
}(this, function(expect, TheSellingPartnerApiForSellers) {
  'use strict';

  var instance;

  beforeEach(function() {
    try{
     instance = new TheSellingPartnerApiForSellers.Business();
    } catch (e) {
     //Handle the cases when this model extends another model by using Model.call(this);
     instance = Object.create(TheSellingPartnerApiForSellers.Business.prototype);
    }
  });

  afterEach(function() {
    instance = null;
  })

  describe('Business', function() {
    it('should create an instance of Business', function() {
      expect(instance).to.be.a(TheSellingPartnerApiForSellers.Business);
    });

    it('should have the property name (base name: "name")', function() {
      // verify property exists
      expect(instance).to.have.property('name');

      // set and verify value
      var validValue = generateMockData('String');
      instance.name = validValue;
      expect(instance.name).to.equal(validValue);
    });

    it('should have the property registeredBusinessAddress (base name: "registeredBusinessAddress")', function() {
      // verify property exists
      expect(instance).to.have.property('registeredBusinessAddress');

      // set and verify value
      var validValue = generateMockData('Address');
      instance.registeredBusinessAddress = validValue;
      expect(instance.registeredBusinessAddress).to.equal(validValue);
    });

    it('should have the property companyRegistrationNumber (base name: "companyRegistrationNumber")', function() {
      // verify property exists
      expect(instance).to.have.property('companyRegistrationNumber');

      // set and verify value
      var validValue = generateMockData('String');
      instance.companyRegistrationNumber = validValue;
      expect(instance.companyRegistrationNumber).to.equal(validValue);
    });

    it('should have the property companyTaxIdentificationNumber (base name: "companyTaxIdentificationNumber")', function() {
      // verify property exists
      expect(instance).to.have.property('companyTaxIdentificationNumber');

      // set and verify value
      var validValue = generateMockData('String');
      instance.companyTaxIdentificationNumber = validValue;
      expect(instance.companyTaxIdentificationNumber).to.equal(validValue);
    });

    it('should have the property nonLatinName (base name: "nonLatinName")', function() {
      // verify property exists
      expect(instance).to.have.property('nonLatinName');

      // set and verify value
      var validValue = generateMockData('String');
      instance.nonLatinName = validValue;
      expect(instance.nonLatinName).to.equal(validValue);
    });

  });

  // Helper function to generate random test data
  function generateMockData(dataType, isArray = false) {
    if (!dataType) return {};

    // Handle array types
    if (isArray) {
      return [generateMockData(dataType), generateMockData(dataType)];
    }

    switch(dataType) {
      case 'String':
        return 'mock-' + Math.random().toString(36).substring(2, 10);
      case 'Number':
        return Math.floor(Math.random() * 1000);
      case 'Boolean':
        return Math.random() > 0.5;
      case 'Date':
        return new Date().toISOString();
      default:
        try {
          const ModelClass = TheSellingPartnerApiForSellers[dataType];
          if (ModelClass) {
            const instance = Object.create(ModelClass.prototype);
            return instance;
          }
        } catch (e) {
          console.error("Error creating instance of", dataType);
          return {};
        }
        return {};
    }
  }

}));
