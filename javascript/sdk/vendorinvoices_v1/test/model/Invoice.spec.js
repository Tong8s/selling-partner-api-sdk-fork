/**
 * Selling Partner API for Retail Procurement Payments
 * The Selling Partner API for Retail Procurement Payments provides programmatic access to vendors payments data.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.SellingPartnerApiForRetailProcurementPayments);
  }
}(this, function(expect, SellingPartnerApiForRetailProcurementPayments) {
  'use strict';

  var instance;

  beforeEach(function() {
    try{
     instance = new SellingPartnerApiForRetailProcurementPayments.Invoice();
    } catch (e) {
     //Handle the cases when this model extends another model by using Model.call(this);
     instance = Object.create(SellingPartnerApiForRetailProcurementPayments.Invoice.prototype);
    }
  });

  afterEach(function() {
    instance = null;
  })

  describe('Invoice', function() {
    it('should create an instance of Invoice', function() {
      expect(instance).to.be.a(SellingPartnerApiForRetailProcurementPayments.Invoice);
    });

    it('should have the property invoiceType', function() {
      // verify property exists
      expect(instance).to.have.property('invoiceType');

      // set and verify value
      var expectedValue = ['Invoice', 'CreditNote', ][0];
      instance.invoiceType = expectedValue;
      expect(instance.invoiceType).to.equal(expectedValue);
    });

    it('should have the property id', function() {
      // verify property exists
      expect(instance).to.have.property('id');

      // set and verify value
      var expectedValue = generateMockData('String');
      instance.id = expectedValue;
      expect(instance.id).to.equal(expectedValue);
    });

    it('should have the property referenceNumber', function() {
      // verify property exists
      expect(instance).to.have.property('referenceNumber');

      // set and verify value
      var expectedValue = generateMockData('String');
      instance.referenceNumber = expectedValue;
      expect(instance.referenceNumber).to.equal(expectedValue);
    });

    it('should have the property date', function() {
      // verify property exists
      expect(instance).to.have.property('date');

      // set and verify value
      var expectedValue = generateMockData('Date');
      instance.date = expectedValue;
      expect(instance.date).to.equal(expectedValue);
    });

    it('should have the property remitToParty', function() {
      // verify property exists
      expect(instance).to.have.property('remitToParty');

      // set and verify value
      var expectedValue = generateMockData('PartyIdentification');
      instance.remitToParty = expectedValue;
      expect(instance.remitToParty).to.equal(expectedValue);
    });

    it('should have the property shipToParty', function() {
      // verify property exists
      expect(instance).to.have.property('shipToParty');

      // set and verify value
      var expectedValue = generateMockData('PartyIdentification');
      instance.shipToParty = expectedValue;
      expect(instance.shipToParty).to.equal(expectedValue);
    });

    it('should have the property shipFromParty', function() {
      // verify property exists
      expect(instance).to.have.property('shipFromParty');

      // set and verify value
      var expectedValue = generateMockData('PartyIdentification');
      instance.shipFromParty = expectedValue;
      expect(instance.shipFromParty).to.equal(expectedValue);
    });

    it('should have the property billToParty', function() {
      // verify property exists
      expect(instance).to.have.property('billToParty');

      // set and verify value
      var expectedValue = generateMockData('PartyIdentification');
      instance.billToParty = expectedValue;
      expect(instance.billToParty).to.equal(expectedValue);
    });

    it('should have the property paymentTerms', function() {
      // verify property exists
      expect(instance).to.have.property('paymentTerms');

      // set and verify value
      var expectedValue = generateMockData('PaymentTerms');
      instance.paymentTerms = expectedValue;
      expect(instance.paymentTerms).to.equal(expectedValue);
    });

    it('should have the property invoiceTotal', function() {
      // verify property exists
      expect(instance).to.have.property('invoiceTotal');

      // set and verify value
      var expectedValue = generateMockData('Money');
      instance.invoiceTotal = expectedValue;
      expect(instance.invoiceTotal).to.equal(expectedValue);
    });

    it('should have the property taxDetails', function() {
      // verify property exists
      expect(instance).to.have.property('taxDetails');

      // set and verify value
      var expectedValue = generateMockData('TaxDetails', true);
      instance.taxDetails = expectedValue;
      expect(instance.taxDetails).to.equal(expectedValue);
    });

    it('should have the property additionalDetails', function() {
      // verify property exists
      expect(instance).to.have.property('additionalDetails');

      // set and verify value
      var expectedValue = generateMockData('AdditionalDetails', true);
      instance.additionalDetails = expectedValue;
      expect(instance.additionalDetails).to.equal(expectedValue);
    });

    it('should have the property chargeDetails', function() {
      // verify property exists
      expect(instance).to.have.property('chargeDetails');

      // set and verify value
      var expectedValue = generateMockData('ChargeDetails', true);
      instance.chargeDetails = expectedValue;
      expect(instance.chargeDetails).to.equal(expectedValue);
    });

    it('should have the property allowanceDetails', function() {
      // verify property exists
      expect(instance).to.have.property('allowanceDetails');

      // set and verify value
      var expectedValue = generateMockData('AllowanceDetails', true);
      instance.allowanceDetails = expectedValue;
      expect(instance.allowanceDetails).to.equal(expectedValue);
    });

    it('should have the property items', function() {
      // verify property exists
      expect(instance).to.have.property('items');

      // set and verify value
      var expectedValue = generateMockData('InvoiceItem', true);
      instance.items = expectedValue;
      expect(instance.items).to.equal(expectedValue);
    });

  });

  // Helper function to generate random test data
  function generateMockData(dataType, isArray = false) {
    if (!dataType) return {};

    // Handle array types
    if (isArray) {
      return [generateMockData(dataType), generateMockData(dataType)];
    }

    switch(dataType) {
      case 'String':
        return 'mock-' + Math.random().toString(36).substring(2, 10);
      case 'Number':
        return Math.floor(Math.random() * 1000);
      case 'Boolean':
        return Math.random() > 0.5;
      case 'Date':
        return new Date().toISOString();
      default:
        try {
          const ModelClass = SellingPartnerApiForRetailProcurementPayments[dataType];
          if (ModelClass) {
            const instance = Object.create(ModelClass.prototype);
            return instance;
          }
        } catch (e) {
          console.error("Error creating instance of", dataType);
          return {};
        }
        return {};
    }
  }

}));
