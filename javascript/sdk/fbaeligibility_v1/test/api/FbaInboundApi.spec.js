/**
 * Selling Partner API for FBA Inbound Eligibilty
 * With the FBA Inbound Eligibility API, you can build applications that let sellers get eligibility previews for items before shipping them to Amazon's fulfillment centers. With this API you can find out if an item is eligible for inbound shipment to Amazon's fulfillment centers in a specific marketplace. You can also find out if an item is eligible for using the manufacturer barcode for FBA inventory tracking. Sellers can use this information to inform their decisions about which items to ship Amazon's fulfillment centers.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', 'sinon', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('sinon'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.sinon, root.SellingPartnerApiForFbaInboundEligibilty);
  }
}(this, function(expect, sinon, SellingPartnerApiForFbaInboundEligibilty) {
  'use strict';

  var instance;
  var sandbox;
  const testEndpoint = 'https://localhost:3000';
  const testAccessToken = "testAccessToken";

  // Helper function to generate random test data
  function generateMockData(dataType, isArray = false) {
    if (!dataType) return {};

    // Handle array types
    if (isArray) {
      return [generateMockData(dataType), generateMockData(dataType)];
    }

    switch(dataType) {
      case 'String':
        return 'mock-' + Math.random().toString(36).substring(2, 10);
      case 'Number':
        return Math.floor(Math.random() * 1000);
      case 'Boolean':
        return Math.random() > 0.5;
      case 'Date':
        return new Date().toISOString();
      default:
        try {
          const ModelClass = SellingPartnerApiForFbaInboundEligibilty[dataType];
          if (ModelClass) {
            const instance = Object.create(ModelClass.prototype);
            return instance;
          }
        } catch (e) {
          console.error("Error creating instance of", dataType);
          return {};
        }
        return {};
    }
  }
  

// Generate mock requests and responses for each operation
const mockgetItemEligibilityPreviewData = {
  request: {
    'asin': generateMockData('String'),
    'program': generateMockData('String'),
  },
  response: {
    data: generateMockData('GetItemEligibilityPreviewResponse'),
    statusCode: 200,
    headers: {}
  }
};

  beforeEach(function() {
    sandbox = sinon.createSandbox();
    var apiClientInstance = new SellingPartnerApiForFbaInboundEligibilty.ApiClient(testEndpoint);
    apiClientInstance.applyXAmzAccessTokenToRequest(testAccessToken);
    sandbox.stub(apiClientInstance, 'callApi');
    instance = new SellingPartnerApiForFbaInboundEligibilty.FbaInboundApi(apiClientInstance);
  });

  afterEach(function() {
    sandbox.restore();
  });

  describe('FbaInboundApi', function() {
    describe('getItemEligibilityPreview', function() {
      
      it('should successfully call getItemEligibilityPreview', function(done) {
        instance.apiClient.callApi.resolves(mockgetItemEligibilityPreviewData.response);

        const params = [
          mockgetItemEligibilityPreviewData.request['asin'],
          mockgetItemEligibilityPreviewData.request['program'],
        ];
        instance.getItemEligibilityPreview(...params)
          .then(function(data) {
            expect(data instanceof SellingPartnerApiForFbaInboundEligibilty.GetItemEligibilityPreviewResponse).to.be.true;
            done();
          })
          .catch(done);
      });

      it('should successfully call getItemEligibilityPreviewWithHttpInfo', function(done) {
        instance.apiClient.callApi.resolves(mockgetItemEligibilityPreviewData.response);

        const params = [
          mockgetItemEligibilityPreviewData.request['asin'],
          mockgetItemEligibilityPreviewData.request['program'],
        ];
        instance.getItemEligibilityPreviewWithHttpInfo(...params)
          .then(function(response) {
            expect(response).to.have.property('statusCode');
            expect(response.statusCode).to.equal(mockgetItemEligibilityPreviewData.response.statusCode)
            expect(response).to.have.property('headers');
            expect(response).to.have.property('data');
            done();
          })
          .catch(done);
      });

      it('should handle API errors', function(done) {
        var errorResponse = {
          errors: new Error('Expected error to be thrown'),
          statusCode: 400,
          headers: {}
        };
        instance.apiClient.callApi.rejects(errorResponse);

        const params = [
          mockgetItemEligibilityPreviewData.request['asin'],
          mockgetItemEligibilityPreviewData.request['program'],
        ];
        instance.getItemEligibilityPreview(...params)
          .then(function() {
            done(new Error('Expected error to be thrown'));
          })
          .catch(function(error) {
            expect(error).to.exist;
            expect(error.statusCode).to.equal(400)
            done();
          });
      });
    });

    describe('constructor', function() {
      it('should use default ApiClient when none provided', function() {
        var defaultInstance = new SellingPartnerApiForFbaInboundEligibilty.FbaInboundApi();
        expect(defaultInstance.apiClient).to.equal(SellingPartnerApiForFbaInboundEligibilty.ApiClient.instance);
      });

      it('should use provided ApiClient', function() {
        var customClient = new SellingPartnerApiForFbaInboundEligibilty.ApiClient();
        var customInstance = new SellingPartnerApiForFbaInboundEligibilty.FbaInboundApi(customClient);
        expect(customInstance.apiClient).to.equal(customClient);
      });
    });
  });
}));
