/**
 * Selling Partner API for FBA Inbound Eligibilty
 * With the FBA Inbound Eligibility API, you can build applications that let sellers get eligibility previews for items before shipping them to Amazon's fulfillment centers. With this API you can find out if an item is eligible for inbound shipment to Amazon's fulfillment centers in a specific marketplace. You can also find out if an item is eligible for using the manufacturer barcode for FBA inventory tracking. Sellers can use this information to inform their decisions about which items to ship Amazon's fulfillment centers.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import {ApiClient} from './ApiClient.js';
import {Error} from './js_client.fbaeligibility_v1.model/Error.js';
import {GetItemEligibilityPreviewResponse} from './js_client.fbaeligibility_v1.model/GetItemEligibilityPreviewResponse.js';
import {ItemEligibilityPreview} from './js_client.fbaeligibility_v1.model/ItemEligibilityPreview.js';
import {FbaInboundApi} from './js_client.fbaeligibility_v1.api/FbaInboundApi.js';


/**
* With the FBA Inbound Eligibility API, you can build applications that let sellers get eligibility previews for items before shipping them to Amazon&#39;s fulfillment centers. With this API you can find out if an item is eligible for inbound shipment to Amazon&#39;s fulfillment centers in a specific marketplace. You can also find out if an item is eligible for using the manufacturer barcode for FBA inventory tracking. Sellers can use this information to inform their decisions about which items to ship Amazon&#39;s fulfillment centers..<br>
* The <code>index</code> module provides access to constructors for all the classes which comprise the public API.
* <p>
* An AMD (recommended!) or CommonJS application will generally do something equivalent to the following:
* <pre>
* var SellingPartnerApiForFbaInboundEligibilty = require('index'); // See note below*.
* var xxxSvc = new SellingPartnerApiForFbaInboundEligibilty.XxxApi(); // Allocate the API class we're going to use.
* var yyyModel = new SellingPartnerApiForFbaInboundEligibilty.Yyy(); // Construct a model instance.
* yyyModel.someProperty = 'someValue';
* ...
* var zzz = xxxSvc.doSomething(yyyModel); // Invoke the service.
* ...
* </pre>
* <em>*NOTE: For a top-level AMD script, use require(['index'], function(){...})
* and put the application logic within the callback function.</em>
* </p>
* <p>
* A non-AMD browser application (discouraged) might do something like this:
* <pre>
* var xxxSvc = new SellingPartnerApiForFbaInboundEligibilty.XxxApi(); // Allocate the API class we're going to use.
* var yyy = new SellingPartnerApiForFbaInboundEligibilty.Yyy(); // Construct a model instance.
* yyyModel.someProperty = 'someValue';
* ...
* var zzz = xxxSvc.doSomething(yyyModel); // Invoke the service.
* ...
* </pre>
* </p>
* @module index
* @version v1
*/
export {
    /**
     * The ApiClient constructor.
     * @property {module:ApiClient}
     */
    ApiClient,

    /**
     * The Error model constructor.
     * @property {module:js_client.fbaeligibility_v1.model/Error}
     */
    Error,

    /**
     * The GetItemEligibilityPreviewResponse model constructor.
     * @property {module:js_client.fbaeligibility_v1.model/GetItemEligibilityPreviewResponse}
     */
    GetItemEligibilityPreviewResponse,

    /**
     * The ItemEligibilityPreview model constructor.
     * @property {module:js_client.fbaeligibility_v1.model/ItemEligibilityPreview}
     */
    ItemEligibilityPreview,

    /**
    * The FbaInboundApi service constructor.
    * @property {module:js_client.fbaeligibility_v1.api/FbaInboundApi}
    */
    FbaInboundApi
};
