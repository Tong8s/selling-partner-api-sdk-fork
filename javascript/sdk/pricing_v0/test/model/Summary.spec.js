/**
 * Selling Partner API for Pricing
 * The Selling Partner API for Pricing helps you programmatically retrieve product pricing and offer information for Amazon Marketplace products.
 *
 * The version of the OpenAPI document: v0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.SellingPartnerApiForPricing);
  }
}(this, function(expect, SellingPartnerApiForPricing) {
  'use strict';

  var instance;

  beforeEach(function() {
    try{
     instance = new SellingPartnerApiForPricing.Summary();
    } catch (e) {
     //Handle the cases when this model extends another model by using Model.call(this);
     instance = Object.create(SellingPartnerApiForPricing.Summary.prototype);
    }
  });

  afterEach(function() {
    instance = null;
  })

  describe('Summary', function() {
    it('should create an instance of Summary', function() {
      expect(instance).to.be.a(SellingPartnerApiForPricing.Summary);
    });

    it('should have the property totalOfferCount (base name: "TotalOfferCount")', function() {
      // verify property exists
      expect(instance).to.have.property('totalOfferCount');

      // set and verify value
      var validValue = generateMockData('Number');
      instance.totalOfferCount = validValue;
      expect(instance.totalOfferCount).to.equal(validValue);
    });

    it('should have the property numberOfOffers (base name: "NumberOfOffers")', function() {
      // verify property exists
      expect(instance).to.have.property('numberOfOffers');

      // set and verify value
      var validValue = generateMockData('[OfferCountType]', true);
      instance.numberOfOffers = validValue;
      expect(instance.numberOfOffers).to.equal(validValue);
    });

    it('should have the property lowestPrices (base name: "LowestPrices")', function() {
      // verify property exists
      expect(instance).to.have.property('lowestPrices');

      // set and verify value
      var validValue = generateMockData('[LowestPriceType]', true);
      instance.lowestPrices = validValue;
      expect(instance.lowestPrices).to.equal(validValue);
    });

    it('should have the property buyBoxPrices (base name: "BuyBoxPrices")', function() {
      // verify property exists
      expect(instance).to.have.property('buyBoxPrices');

      // set and verify value
      var validValue = generateMockData('[BuyBoxPriceType]', true);
      instance.buyBoxPrices = validValue;
      expect(instance.buyBoxPrices).to.equal(validValue);
    });

    it('should have the property listPrice (base name: "ListPrice")', function() {
      // verify property exists
      expect(instance).to.have.property('listPrice');

      // set and verify value
      var validValue = generateMockData('MoneyType');
      instance.listPrice = validValue;
      expect(instance.listPrice).to.equal(validValue);
    });

    it('should have the property competitivePriceThreshold (base name: "CompetitivePriceThreshold")', function() {
      // verify property exists
      expect(instance).to.have.property('competitivePriceThreshold');

      // set and verify value
      var validValue = generateMockData('MoneyType');
      instance.competitivePriceThreshold = validValue;
      expect(instance.competitivePriceThreshold).to.equal(validValue);
    });

    it('should have the property suggestedLowerPricePlusShipping (base name: "SuggestedLowerPricePlusShipping")', function() {
      // verify property exists
      expect(instance).to.have.property('suggestedLowerPricePlusShipping');

      // set and verify value
      var validValue = generateMockData('MoneyType');
      instance.suggestedLowerPricePlusShipping = validValue;
      expect(instance.suggestedLowerPricePlusShipping).to.equal(validValue);
    });

    it('should have the property salesRankings (base name: "SalesRankings")', function() {
      // verify property exists
      expect(instance).to.have.property('salesRankings');

      // set and verify value
      var validValue = generateMockData('[SalesRankType]', true);
      instance.salesRankings = validValue;
      expect(instance.salesRankings).to.equal(validValue);
    });

    it('should have the property buyBoxEligibleOffers (base name: "BuyBoxEligibleOffers")', function() {
      // verify property exists
      expect(instance).to.have.property('buyBoxEligibleOffers');

      // set and verify value
      var validValue = generateMockData('[OfferCountType]', true);
      instance.buyBoxEligibleOffers = validValue;
      expect(instance.buyBoxEligibleOffers).to.equal(validValue);
    });

    it('should have the property offersAvailableTime (base name: "OffersAvailableTime")', function() {
      // verify property exists
      expect(instance).to.have.property('offersAvailableTime');

      // set and verify value
      var validValue = generateMockData('Date');
      instance.offersAvailableTime = validValue;
      expect(instance.offersAvailableTime).to.equal(validValue);
    });

  });

  // Helper function to generate random test data
  function generateMockData(dataType, isArray = false) {
    if (!dataType) return {};

    // Handle array types
    if (isArray) {
      return [generateMockData(dataType), generateMockData(dataType)];
    }

    switch(dataType) {
      case 'String':
        return 'mock-' + Math.random().toString(36).substring(2, 10);
      case 'Number':
        return Math.floor(Math.random() * 1000);
      case 'Boolean':
        return Math.random() > 0.5;
      case 'Date':
        return new Date().toISOString();
      default:
        try {
          const ModelClass = SellingPartnerApiForPricing[dataType];
          if (ModelClass) {
            const instance = Object.create(ModelClass.prototype);
            return instance;
          }
        } catch (e) {
          console.error("Error creating instance of", dataType);
          return {};
        }
        return {};
    }
  }

}));
