/**
 * Selling Partner API for Retail Procurement Shipments
 * The Selling Partner API for Retail Procurement Shipments provides programmatic access to retail shipping data for vendors.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.SellingPartnerApiForRetailProcurementShipments);
  }
}(this, function(expect, SellingPartnerApiForRetailProcurementShipments) {
  'use strict';

  var instance;

  beforeEach(function() {
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('Shipment', function() {
    it('should create an instance of Shipment', function() {
      // uncomment below and update the code to test Shipment
      //var instance = new SellingPartnerApiForRetailProcurementShipments.Shipment();
      //expect(instance).to.be.a(SellingPartnerApiForRetailProcurementShipments.Shipment);
    });

    it('should have the property vendorShipmentIdentifier (base name: "vendorShipmentIdentifier")', function() {
      // uncomment below and update the code to test the property vendorShipmentIdentifier
      //var instance = new SellingPartnerApiForRetailProcurementShipments.Shipment();
      //expect(instance).to.be();
    });

    it('should have the property transactionType (base name: "transactionType")', function() {
      // uncomment below and update the code to test the property transactionType
      //var instance = new SellingPartnerApiForRetailProcurementShipments.Shipment();
      //expect(instance).to.be();
    });

    it('should have the property buyerReferenceNumber (base name: "buyerReferenceNumber")', function() {
      // uncomment below and update the code to test the property buyerReferenceNumber
      //var instance = new SellingPartnerApiForRetailProcurementShipments.Shipment();
      //expect(instance).to.be();
    });

    it('should have the property transactionDate (base name: "transactionDate")', function() {
      // uncomment below and update the code to test the property transactionDate
      //var instance = new SellingPartnerApiForRetailProcurementShipments.Shipment();
      //expect(instance).to.be();
    });

    it('should have the property currentShipmentStatus (base name: "currentShipmentStatus")', function() {
      // uncomment below and update the code to test the property currentShipmentStatus
      //var instance = new SellingPartnerApiForRetailProcurementShipments.Shipment();
      //expect(instance).to.be();
    });

    it('should have the property currentshipmentStatusDate (base name: "currentshipmentStatusDate")', function() {
      // uncomment below and update the code to test the property currentshipmentStatusDate
      //var instance = new SellingPartnerApiForRetailProcurementShipments.Shipment();
      //expect(instance).to.be();
    });

    it('should have the property shipmentStatusDetails (base name: "shipmentStatusDetails")', function() {
      // uncomment below and update the code to test the property shipmentStatusDetails
      //var instance = new SellingPartnerApiForRetailProcurementShipments.Shipment();
      //expect(instance).to.be();
    });

    it('should have the property shipmentCreateDate (base name: "shipmentCreateDate")', function() {
      // uncomment below and update the code to test the property shipmentCreateDate
      //var instance = new SellingPartnerApiForRetailProcurementShipments.Shipment();
      //expect(instance).to.be();
    });

    it('should have the property shipmentConfirmDate (base name: "shipmentConfirmDate")', function() {
      // uncomment below and update the code to test the property shipmentConfirmDate
      //var instance = new SellingPartnerApiForRetailProcurementShipments.Shipment();
      //expect(instance).to.be();
    });

    it('should have the property packageLabelCreateDate (base name: "packageLabelCreateDate")', function() {
      // uncomment below and update the code to test the property packageLabelCreateDate
      //var instance = new SellingPartnerApiForRetailProcurementShipments.Shipment();
      //expect(instance).to.be();
    });

    it('should have the property shipmentFreightTerm (base name: "shipmentFreightTerm")', function() {
      // uncomment below and update the code to test the property shipmentFreightTerm
      //var instance = new SellingPartnerApiForRetailProcurementShipments.Shipment();
      //expect(instance).to.be();
    });

    it('should have the property sellingParty (base name: "sellingParty")', function() {
      // uncomment below and update the code to test the property sellingParty
      //var instance = new SellingPartnerApiForRetailProcurementShipments.Shipment();
      //expect(instance).to.be();
    });

    it('should have the property shipFromParty (base name: "shipFromParty")', function() {
      // uncomment below and update the code to test the property shipFromParty
      //var instance = new SellingPartnerApiForRetailProcurementShipments.Shipment();
      //expect(instance).to.be();
    });

    it('should have the property shipToParty (base name: "shipToParty")', function() {
      // uncomment below and update the code to test the property shipToParty
      //var instance = new SellingPartnerApiForRetailProcurementShipments.Shipment();
      //expect(instance).to.be();
    });

    it('should have the property shipmentMeasurements (base name: "shipmentMeasurements")', function() {
      // uncomment below and update the code to test the property shipmentMeasurements
      //var instance = new SellingPartnerApiForRetailProcurementShipments.Shipment();
      //expect(instance).to.be();
    });

    it('should have the property collectFreightPickupDetails (base name: "collectFreightPickupDetails")', function() {
      // uncomment below and update the code to test the property collectFreightPickupDetails
      //var instance = new SellingPartnerApiForRetailProcurementShipments.Shipment();
      //expect(instance).to.be();
    });

    it('should have the property purchaseOrders (base name: "purchaseOrders")', function() {
      // uncomment below and update the code to test the property purchaseOrders
      //var instance = new SellingPartnerApiForRetailProcurementShipments.Shipment();
      //expect(instance).to.be();
    });

    it('should have the property importDetails (base name: "importDetails")', function() {
      // uncomment below and update the code to test the property importDetails
      //var instance = new SellingPartnerApiForRetailProcurementShipments.Shipment();
      //expect(instance).to.be();
    });

    it('should have the property containers (base name: "containers")', function() {
      // uncomment below and update the code to test the property containers
      //var instance = new SellingPartnerApiForRetailProcurementShipments.Shipment();
      //expect(instance).to.be();
    });

    it('should have the property transportationDetails (base name: "transportationDetails")', function() {
      // uncomment below and update the code to test the property transportationDetails
      //var instance = new SellingPartnerApiForRetailProcurementShipments.Shipment();
      //expect(instance).to.be();
    });

  });

}));