/**
 * Selling Partner API for Retail Procurement Shipments
 * The Selling Partner API for Retail Procurement Shipments provides programmatic access to retail shipping data for vendors.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.SellingPartnerApiForRetailProcurementShipments);
  }
}(this, function(expect, SellingPartnerApiForRetailProcurementShipments) {
  'use strict';

  var instance;

  beforeEach(function() {
    try{
     instance = new SellingPartnerApiForRetailProcurementShipments.ShipmentConfirmation();
    } catch (e) {
     //Handle the cases when this model extends another model by using Model.call(this);
     instance = Object.create(SellingPartnerApiForRetailProcurementShipments.ShipmentConfirmation.prototype);
    }
  });

  afterEach(function() {
    instance = null;
  })

  describe('ShipmentConfirmation', function() {
    it('should create an instance of ShipmentConfirmation', function() {
      expect(instance).to.be.a(SellingPartnerApiForRetailProcurementShipments.ShipmentConfirmation);
    });

    it('should have the property shipmentIdentifier', function() {
      // verify property exists
      expect(instance).to.have.property('shipmentIdentifier');

      // set and verify value
      var expectedValue = generateMockData('String');
      instance.shipmentIdentifier = expectedValue;
      expect(instance.shipmentIdentifier).to.equal(expectedValue);
    });

    it('should have the property shipmentConfirmationType', function() {
      // verify property exists
      expect(instance).to.have.property('shipmentConfirmationType');

      // set and verify value
      var expectedValue = ['Original', 'Replace', ][0];
      instance.shipmentConfirmationType = expectedValue;
      expect(instance.shipmentConfirmationType).to.equal(expectedValue);
    });

    it('should have the property shipmentType', function() {
      // verify property exists
      expect(instance).to.have.property('shipmentType');

      // set and verify value
      var expectedValue = ['TruckLoad', 'LessThanTruckLoad', 'SmallParcel', ][0];
      instance.shipmentType = expectedValue;
      expect(instance.shipmentType).to.equal(expectedValue);
    });

    it('should have the property shipmentStructure', function() {
      // verify property exists
      expect(instance).to.have.property('shipmentStructure');

      // set and verify value
      var expectedValue = ['PalletizedAssortmentCase', 'LooseAssortmentCase', 'PalletOfItems', 'PalletizedStandardCase', 'LooseStandardCase', 'MasterPallet', 'MasterCase', ][0];
      instance.shipmentStructure = expectedValue;
      expect(instance.shipmentStructure).to.equal(expectedValue);
    });

    it('should have the property transportationDetails', function() {
      // verify property exists
      expect(instance).to.have.property('transportationDetails');

      // set and verify value
      var expectedValue = generateMockData('TransportationDetailsForShipmentConfirmation');
      instance.transportationDetails = expectedValue;
      expect(instance.transportationDetails).to.equal(expectedValue);
    });

    it('should have the property amazonReferenceNumber', function() {
      // verify property exists
      expect(instance).to.have.property('amazonReferenceNumber');

      // set and verify value
      var expectedValue = generateMockData('String');
      instance.amazonReferenceNumber = expectedValue;
      expect(instance.amazonReferenceNumber).to.equal(expectedValue);
    });

    it('should have the property shipmentConfirmationDate', function() {
      // verify property exists
      expect(instance).to.have.property('shipmentConfirmationDate');

      // set and verify value
      var expectedValue = generateMockData('Date');
      instance.shipmentConfirmationDate = expectedValue;
      expect(instance.shipmentConfirmationDate).to.equal(expectedValue);
    });

    it('should have the property shippedDate', function() {
      // verify property exists
      expect(instance).to.have.property('shippedDate');

      // set and verify value
      var expectedValue = generateMockData('Date');
      instance.shippedDate = expectedValue;
      expect(instance.shippedDate).to.equal(expectedValue);
    });

    it('should have the property estimatedDeliveryDate', function() {
      // verify property exists
      expect(instance).to.have.property('estimatedDeliveryDate');

      // set and verify value
      var expectedValue = generateMockData('Date');
      instance.estimatedDeliveryDate = expectedValue;
      expect(instance.estimatedDeliveryDate).to.equal(expectedValue);
    });

    it('should have the property sellingParty', function() {
      // verify property exists
      expect(instance).to.have.property('sellingParty');

      // set and verify value
      var expectedValue = generateMockData('PartyIdentification');
      instance.sellingParty = expectedValue;
      expect(instance.sellingParty).to.equal(expectedValue);
    });

    it('should have the property shipFromParty', function() {
      // verify property exists
      expect(instance).to.have.property('shipFromParty');

      // set and verify value
      var expectedValue = generateMockData('PartyIdentification');
      instance.shipFromParty = expectedValue;
      expect(instance.shipFromParty).to.equal(expectedValue);
    });

    it('should have the property shipToParty', function() {
      // verify property exists
      expect(instance).to.have.property('shipToParty');

      // set and verify value
      var expectedValue = generateMockData('PartyIdentification');
      instance.shipToParty = expectedValue;
      expect(instance.shipToParty).to.equal(expectedValue);
    });

    it('should have the property shipmentMeasurements', function() {
      // verify property exists
      expect(instance).to.have.property('shipmentMeasurements');

      // set and verify value
      var expectedValue = generateMockData('ShipmentMeasurements');
      instance.shipmentMeasurements = expectedValue;
      expect(instance.shipmentMeasurements).to.equal(expectedValue);
    });

    it('should have the property importDetails', function() {
      // verify property exists
      expect(instance).to.have.property('importDetails');

      // set and verify value
      var expectedValue = generateMockData('ImportDetails');
      instance.importDetails = expectedValue;
      expect(instance.importDetails).to.equal(expectedValue);
    });

    it('should have the property shippedItems', function() {
      // verify property exists
      expect(instance).to.have.property('shippedItems');

      // set and verify value
      var expectedValue = generateMockData('Item', true);
      instance.shippedItems = expectedValue;
      expect(instance.shippedItems).to.equal(expectedValue);
    });

    it('should have the property cartons', function() {
      // verify property exists
      expect(instance).to.have.property('cartons');

      // set and verify value
      var expectedValue = generateMockData('Carton', true);
      instance.cartons = expectedValue;
      expect(instance.cartons).to.equal(expectedValue);
    });

    it('should have the property pallets', function() {
      // verify property exists
      expect(instance).to.have.property('pallets');

      // set and verify value
      var expectedValue = generateMockData('Pallet', true);
      instance.pallets = expectedValue;
      expect(instance.pallets).to.equal(expectedValue);
    });

  });

  // Helper function to generate random test data
  function generateMockData(dataType, isArray = false) {
    if (!dataType) return {};

    // Handle array types
    if (isArray) {
      return [generateMockData(dataType), generateMockData(dataType)];
    }

    switch(dataType) {
      case 'String':
        return 'mock-' + Math.random().toString(36).substring(2, 10);
      case 'Number':
        return Math.floor(Math.random() * 1000);
      case 'Boolean':
        return Math.random() > 0.5;
      case 'Date':
        return new Date().toISOString();
      default:
        try {
          const ModelClass = SellingPartnerApiForRetailProcurementShipments[dataType];
          if (ModelClass) {
            const instance = Object.create(ModelClass.prototype);
            return instance;
          }
        } catch (e) {
          console.error("Error creating instance of", dataType);
          return {};
        }
        return {};
    }
  }

}));
