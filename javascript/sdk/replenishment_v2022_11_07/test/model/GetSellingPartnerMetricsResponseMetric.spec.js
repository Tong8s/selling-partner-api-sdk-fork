/**
 * Selling Partner API for Replenishment
 * The Selling Partner API for Replenishment (Replenishment API) provides programmatic access to replenishment program metrics and offers. These programs provide recurring delivery of any replenishable item at a frequency chosen by the customer.  The Replenishment API is available worldwide wherever Amazon Subscribe & Save is available or is supported. The API is available to vendors and FBA selling partners.
 *
 * The version of the OpenAPI document: 2022-11-07
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.SellingPartnerApiForReplenishment);
  }
}(this, function(expect, SellingPartnerApiForReplenishment) {
  'use strict';

  var instance;

  beforeEach(function() {
    try{
     instance = new SellingPartnerApiForReplenishment.GetSellingPartnerMetricsResponseMetric();
    } catch (e) {
     //Handle the cases when this model extends another model by using Model.call(this);
     instance = Object.create(SellingPartnerApiForReplenishment.GetSellingPartnerMetricsResponseMetric.prototype);
    }
  });

  afterEach(function() {
    instance = null;
  })

  describe('GetSellingPartnerMetricsResponseMetric', function() {
    it('should create an instance of GetSellingPartnerMetricsResponseMetric', function() {
      expect(instance).to.be.a(SellingPartnerApiForReplenishment.GetSellingPartnerMetricsResponseMetric);
    });

    it('should have the property notDeliveredDueToOOS (base name: "notDeliveredDueToOOS")', function() {
      // verify property exists
      expect(instance).to.have.property('notDeliveredDueToOOS');

      // set and verify value
      var validValue = generateMockData('Number');
      instance.notDeliveredDueToOOS = validValue;
      expect(instance.notDeliveredDueToOOS).to.equal(validValue);
    });

    it('should have the property totalSubscriptionsRevenue (base name: "totalSubscriptionsRevenue")', function() {
      // verify property exists
      expect(instance).to.have.property('totalSubscriptionsRevenue');

      // set and verify value
      var validValue = generateMockData('Number');
      instance.totalSubscriptionsRevenue = validValue;
      expect(instance.totalSubscriptionsRevenue).to.equal(validValue);
    });

    it('should have the property shippedSubscriptionUnits (base name: "shippedSubscriptionUnits")', function() {
      // verify property exists
      expect(instance).to.have.property('shippedSubscriptionUnits');

      // set and verify value
      var validValue = generateMockData('Number');
      instance.shippedSubscriptionUnits = validValue;
      expect(instance.shippedSubscriptionUnits).to.equal(validValue);
    });

    it('should have the property activeSubscriptions (base name: "activeSubscriptions")', function() {
      // verify property exists
      expect(instance).to.have.property('activeSubscriptions');

      // set and verify value
      var validValue = generateMockData('Number');
      instance.activeSubscriptions = validValue;
      expect(instance.activeSubscriptions).to.equal(validValue);
    });

    it('should have the property subscriberAverageRevenue (base name: "subscriberAverageRevenue")', function() {
      // verify property exists
      expect(instance).to.have.property('subscriberAverageRevenue');

      // set and verify value
      var validValue = generateMockData('Number');
      instance.subscriberAverageRevenue = validValue;
      expect(instance.subscriberAverageRevenue).to.equal(validValue);
    });

    it('should have the property nonSubscriberAverageRevenue (base name: "nonSubscriberAverageRevenue")', function() {
      // verify property exists
      expect(instance).to.have.property('nonSubscriberAverageRevenue');

      // set and verify value
      var validValue = generateMockData('Number');
      instance.nonSubscriberAverageRevenue = validValue;
      expect(instance.nonSubscriberAverageRevenue).to.equal(validValue);
    });

    it('should have the property lostRevenueDueToOOS (base name: "lostRevenueDueToOOS")', function() {
      // verify property exists
      expect(instance).to.have.property('lostRevenueDueToOOS');

      // set and verify value
      var validValue = generateMockData('Number');
      instance.lostRevenueDueToOOS = validValue;
      expect(instance.lostRevenueDueToOOS).to.equal(validValue);
    });

    it('should have the property subscriberAverageReorders (base name: "subscriberAverageReorders")', function() {
      // verify property exists
      expect(instance).to.have.property('subscriberAverageReorders');

      // set and verify value
      var validValue = generateMockData('Number');
      instance.subscriberAverageReorders = validValue;
      expect(instance.subscriberAverageReorders).to.equal(validValue);
    });

    it('should have the property nonSubscriberAverageReorders (base name: "nonSubscriberAverageReorders")', function() {
      // verify property exists
      expect(instance).to.have.property('nonSubscriberAverageReorders');

      // set and verify value
      var validValue = generateMockData('Number');
      instance.nonSubscriberAverageReorders = validValue;
      expect(instance.nonSubscriberAverageReorders).to.equal(validValue);
    });

    it('should have the property couponsRevenuePenetration (base name: "couponsRevenuePenetration")', function() {
      // verify property exists
      expect(instance).to.have.property('couponsRevenuePenetration');

      // set and verify value
      var validValue = generateMockData('Number');
      instance.couponsRevenuePenetration = validValue;
      expect(instance.couponsRevenuePenetration).to.equal(validValue);
    });

    it('should have the property revenueFromSubscriptionsWithMultipleDeliveries (base name: "revenueFromSubscriptionsWithMultipleDeliveries")', function() {
      // verify property exists
      expect(instance).to.have.property('revenueFromSubscriptionsWithMultipleDeliveries');

      // set and verify value
      var validValue = generateMockData('Number');
      instance.revenueFromSubscriptionsWithMultipleDeliveries = validValue;
      expect(instance.revenueFromSubscriptionsWithMultipleDeliveries).to.equal(validValue);
    });

    it('should have the property revenueFromActiveSubscriptionsWithSingleDelivery (base name: "revenueFromActiveSubscriptionsWithSingleDelivery")', function() {
      // verify property exists
      expect(instance).to.have.property('revenueFromActiveSubscriptionsWithSingleDelivery');

      // set and verify value
      var validValue = generateMockData('Number');
      instance.revenueFromActiveSubscriptionsWithSingleDelivery = validValue;
      expect(instance.revenueFromActiveSubscriptionsWithSingleDelivery).to.equal(validValue);
    });

    it('should have the property revenueFromCancelledSubscriptionsAfterSingleDelivery (base name: "revenueFromCancelledSubscriptionsAfterSingleDelivery")', function() {
      // verify property exists
      expect(instance).to.have.property('revenueFromCancelledSubscriptionsAfterSingleDelivery');

      // set and verify value
      var validValue = generateMockData('Number');
      instance.revenueFromCancelledSubscriptionsAfterSingleDelivery = validValue;
      expect(instance.revenueFromCancelledSubscriptionsAfterSingleDelivery).to.equal(validValue);
    });

    it('should have the property subscriberRetentionFor30Days (base name: "subscriberRetentionFor30Days")', function() {
      // verify property exists
      expect(instance).to.have.property('subscriberRetentionFor30Days');

      // set and verify value
      var validValue = generateMockData('Number');
      instance.subscriberRetentionFor30Days = validValue;
      expect(instance.subscriberRetentionFor30Days).to.equal(validValue);
    });

    it('should have the property subscriberRetentionFor90Days (base name: "subscriberRetentionFor90Days")', function() {
      // verify property exists
      expect(instance).to.have.property('subscriberRetentionFor90Days');

      // set and verify value
      var validValue = generateMockData('Number');
      instance.subscriberRetentionFor90Days = validValue;
      expect(instance.subscriberRetentionFor90Days).to.equal(validValue);
    });

    it('should have the property revenuePenetrationFor0PercentSellerFunding (base name: "revenuePenetrationFor0PercentSellerFunding")', function() {
      // verify property exists
      expect(instance).to.have.property('revenuePenetrationFor0PercentSellerFunding');

      // set and verify value
      var validValue = generateMockData('Number');
      instance.revenuePenetrationFor0PercentSellerFunding = validValue;
      expect(instance.revenuePenetrationFor0PercentSellerFunding).to.equal(validValue);
    });

    it('should have the property revenuePenetrationFor5PercentSellerFunding (base name: "revenuePenetrationFor5PercentSellerFunding")', function() {
      // verify property exists
      expect(instance).to.have.property('revenuePenetrationFor5PercentSellerFunding');

      // set and verify value
      var validValue = generateMockData('Number');
      instance.revenuePenetrationFor5PercentSellerFunding = validValue;
      expect(instance.revenuePenetrationFor5PercentSellerFunding).to.equal(validValue);
    });

    it('should have the property revenuePenetrationFor10PercentSellerFunding (base name: "revenuePenetrationFor10PercentSellerFunding")', function() {
      // verify property exists
      expect(instance).to.have.property('revenuePenetrationFor10PercentSellerFunding');

      // set and verify value
      var validValue = generateMockData('Number');
      instance.revenuePenetrationFor10PercentSellerFunding = validValue;
      expect(instance.revenuePenetrationFor10PercentSellerFunding).to.equal(validValue);
    });

    it('should have the property revenuePenetrationFor5PlusPercentSellerFunding (base name: "revenuePenetrationFor5PlusPercentSellerFunding")', function() {
      // verify property exists
      expect(instance).to.have.property('revenuePenetrationFor5PlusPercentSellerFunding');

      // set and verify value
      var validValue = generateMockData('Number');
      instance.revenuePenetrationFor5PlusPercentSellerFunding = validValue;
      expect(instance.revenuePenetrationFor5PlusPercentSellerFunding).to.equal(validValue);
    });

    it('should have the property shareOfCouponSubscriptions (base name: "shareOfCouponSubscriptions")', function() {
      // verify property exists
      expect(instance).to.have.property('shareOfCouponSubscriptions');

      // set and verify value
      var validValue = generateMockData('Number');
      instance.shareOfCouponSubscriptions = validValue;
      expect(instance.shareOfCouponSubscriptions).to.equal(validValue);
    });

    it('should have the property timeInterval (base name: "timeInterval")', function() {
      // verify property exists
      expect(instance).to.have.property('timeInterval');

      // set and verify value
      var validValue = generateMockData('TimeInterval');
      instance.timeInterval = validValue;
      expect(instance.timeInterval).to.equal(validValue);
    });

    it('should have the property currencyCode (base name: "currencyCode")', function() {
      // verify property exists
      expect(instance).to.have.property('currencyCode');

      // set and verify value
      var validValue = generateMockData('String');
      instance.currencyCode = validValue;
      expect(instance.currencyCode).to.equal(validValue);
    });

  });

  // Helper function to generate random test data
  function generateMockData(dataType, isArray = false) {
    if (!dataType) return {};

    // Handle array types
    if (isArray) {
      return [generateMockData(dataType), generateMockData(dataType)];
    }

    switch(dataType) {
      case 'String':
        return 'mock-' + Math.random().toString(36).substring(2, 10);
      case 'Number':
        return Math.floor(Math.random() * 1000);
      case 'Boolean':
        return Math.random() > 0.5;
      case 'Date':
        return new Date().toISOString();
      default:
        try {
          const ModelClass = SellingPartnerApiForReplenishment[dataType];
          if (ModelClass) {
            const instance = Object.create(ModelClass.prototype);
            return instance;
          }
        } catch (e) {
          console.error("Error creating instance of", dataType);
          return {};
        }
        return {};
    }
  }

}));
