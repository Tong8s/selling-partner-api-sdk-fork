/**
 * The Selling Partner API for FBA inbound operations.
 * The Selling Partner API for Fulfillment By Amazon (FBA) Inbound. The FBA Inbound API enables building inbound workflows to create, manage, and send shipments into Amazon's fulfillment network. The API has interoperability with the Send-to-Amazon user interface.
 *
 * The version of the OpenAPI document: 2024-03-20
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.TheSellingPartnerApiForFbaInboundOperations);
  }
}(this, function(expect, TheSellingPartnerApiForFbaInboundOperations) {
  'use strict';

  var instance;

  beforeEach(function() {
    try{
     instance = new TheSellingPartnerApiForFbaInboundOperations.InboundPlan();
    } catch (e) {
     //Handle the cases when this model extends another model by using Model.call(this);
     instance = Object.create(TheSellingPartnerApiForFbaInboundOperations.InboundPlan.prototype);
    }
  });

  afterEach(function() {
    instance = null;
  })

  describe('InboundPlan', function() {
    it('should create an instance of InboundPlan', function() {
      expect(instance).to.be.a(TheSellingPartnerApiForFbaInboundOperations.InboundPlan);
    });

    it('should have the property createdAt (base name: "createdAt")', function() {
      // verify property exists
      expect(instance).to.have.property('createdAt');

      // set and verify value
      var validValue = generateMockData('Date');
      instance.createdAt = validValue;
      expect(instance.createdAt).to.equal(validValue);
    });

    it('should have the property inboundPlanId (base name: "inboundPlanId")', function() {
      // verify property exists
      expect(instance).to.have.property('inboundPlanId');

      // set and verify value
      var validValue = generateMockData('String');
      instance.inboundPlanId = validValue;
      expect(instance.inboundPlanId).to.equal(validValue);
    });

    it('should have the property lastUpdatedAt (base name: "lastUpdatedAt")', function() {
      // verify property exists
      expect(instance).to.have.property('lastUpdatedAt');

      // set and verify value
      var validValue = generateMockData('Date');
      instance.lastUpdatedAt = validValue;
      expect(instance.lastUpdatedAt).to.equal(validValue);
    });

    it('should have the property marketplaceIds (base name: "marketplaceIds")', function() {
      // verify property exists
      expect(instance).to.have.property('marketplaceIds');

      // set and verify value
      var validValue = generateMockData('[String]', true);
      instance.marketplaceIds = validValue;
      expect(instance.marketplaceIds).to.equal(validValue);
    });

    it('should have the property name (base name: "name")', function() {
      // verify property exists
      expect(instance).to.have.property('name');

      // set and verify value
      var validValue = generateMockData('String');
      instance.name = validValue;
      expect(instance.name).to.equal(validValue);
    });

    it('should have the property packingOptions (base name: "packingOptions")', function() {
      // verify property exists
      expect(instance).to.have.property('packingOptions');

      // set and verify value
      var validValue = generateMockData('[PackingOptionSummary]', true);
      instance.packingOptions = validValue;
      expect(instance.packingOptions).to.equal(validValue);
    });

    it('should have the property placementOptions (base name: "placementOptions")', function() {
      // verify property exists
      expect(instance).to.have.property('placementOptions');

      // set and verify value
      var validValue = generateMockData('[PlacementOptionSummary]', true);
      instance.placementOptions = validValue;
      expect(instance.placementOptions).to.equal(validValue);
    });

    it('should have the property shipments (base name: "shipments")', function() {
      // verify property exists
      expect(instance).to.have.property('shipments');

      // set and verify value
      var validValue = generateMockData('[ShipmentSummary]', true);
      instance.shipments = validValue;
      expect(instance.shipments).to.equal(validValue);
    });

    it('should have the property sourceAddress (base name: "sourceAddress")', function() {
      // verify property exists
      expect(instance).to.have.property('sourceAddress');

      // set and verify value
      var validValue = generateMockData('Address');
      instance.sourceAddress = validValue;
      expect(instance.sourceAddress).to.equal(validValue);
    });

    it('should have the property status (base name: "status")', function() {
      // verify property exists
      expect(instance).to.have.property('status');

      // set and verify value
      var validValue = generateMockData('String');
      instance.status = validValue;
      expect(instance.status).to.equal(validValue);
    });

  });

  // Helper function to generate random test data
  function generateMockData(dataType, isArray = false) {
    if (!dataType) return {};

    // Handle array types
    if (isArray) {
      return [generateMockData(dataType), generateMockData(dataType)];
    }

    switch(dataType) {
      case 'String':
        return 'mock-' + Math.random().toString(36).substring(2, 10);
      case 'Number':
        return Math.floor(Math.random() * 1000);
      case 'Boolean':
        return Math.random() > 0.5;
      case 'Date':
        return new Date().toISOString();
      default:
        try {
          const ModelClass = TheSellingPartnerApiForFbaInboundOperations[dataType];
          if (ModelClass) {
            const instance = Object.create(ModelClass.prototype);
            return instance;
          }
        } catch (e) {
          console.error("Error creating instance of", dataType);
          return {};
        }
        return {};
    }
  }

}));
