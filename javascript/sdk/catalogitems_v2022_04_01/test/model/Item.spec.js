/**
 * Selling Partner API for Catalog Items
 * Use the Selling Partner API for Catalog Items to retrieve information about items in the Amazon catalog.  For more information, refer to the [Catalog Items API Use Case Guide](https://developer-docs.amazon.com/sp-api/docs/:catalog-items-api-v2022-04-01-use-case-guide).
 *
 * The version of the OpenAPI document: 2022-04-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.SellingPartnerApiForCatalogItems);
  }
}(this, function(expect, SellingPartnerApiForCatalogItems) {
  'use strict';

  var instance;

  beforeEach(function() {
    try{
     instance = new SellingPartnerApiForCatalogItems.Item();
    } catch (e) {
     //Handle the cases when this model extends another model by using Model.call(this);
     instance = Object.create(SellingPartnerApiForCatalogItems.Item.prototype);
    }
  });

  afterEach(function() {
    instance = null;
  })

  describe('Item', function() {
    it('should create an instance of Item', function() {
      expect(instance).to.be.a(SellingPartnerApiForCatalogItems.Item);
    });

    it('should have the property asin (base name: "asin")', function() {
      // verify property exists
      expect(instance).to.have.property('asin');

      // set and verify value
      var validValue = generateMockData('String');
      instance.asin = validValue;
      expect(instance.asin).to.equal(validValue);
    });

    it('should have the property attributes (base name: "attributes")', function() {
      // verify property exists
      expect(instance).to.have.property('attributes');

      // set and verify value
      var validValue = generateMockData('{String: Object}');
      instance.attributes = validValue;
      expect(instance.attributes).to.equal(validValue);
    });

    it('should have the property classifications (base name: "classifications")', function() {
      // verify property exists
      expect(instance).to.have.property('classifications');

      // set and verify value
      var validValue = generateMockData('[ItemBrowseClassificationsByMarketplace]', true);
      instance.classifications = validValue;
      expect(instance.classifications).to.equal(validValue);
    });

    it('should have the property dimensions (base name: "dimensions")', function() {
      // verify property exists
      expect(instance).to.have.property('dimensions');

      // set and verify value
      var validValue = generateMockData('[ItemDimensionsByMarketplace]', true);
      instance.dimensions = validValue;
      expect(instance.dimensions).to.equal(validValue);
    });

    it('should have the property identifiers (base name: "identifiers")', function() {
      // verify property exists
      expect(instance).to.have.property('identifiers');

      // set and verify value
      var validValue = generateMockData('[ItemIdentifiersByMarketplace]', true);
      instance.identifiers = validValue;
      expect(instance.identifiers).to.equal(validValue);
    });

    it('should have the property images (base name: "images")', function() {
      // verify property exists
      expect(instance).to.have.property('images');

      // set and verify value
      var validValue = generateMockData('[ItemImagesByMarketplace]', true);
      instance.images = validValue;
      expect(instance.images).to.equal(validValue);
    });

    it('should have the property productTypes (base name: "productTypes")', function() {
      // verify property exists
      expect(instance).to.have.property('productTypes');

      // set and verify value
      var validValue = generateMockData('[ItemProductTypeByMarketplace]', true);
      instance.productTypes = validValue;
      expect(instance.productTypes).to.equal(validValue);
    });

    it('should have the property relationships (base name: "relationships")', function() {
      // verify property exists
      expect(instance).to.have.property('relationships');

      // set and verify value
      var validValue = generateMockData('[ItemRelationshipsByMarketplace]', true);
      instance.relationships = validValue;
      expect(instance.relationships).to.equal(validValue);
    });

    it('should have the property salesRanks (base name: "salesRanks")', function() {
      // verify property exists
      expect(instance).to.have.property('salesRanks');

      // set and verify value
      var validValue = generateMockData('[ItemSalesRanksByMarketplace]', true);
      instance.salesRanks = validValue;
      expect(instance.salesRanks).to.equal(validValue);
    });

    it('should have the property summaries (base name: "summaries")', function() {
      // verify property exists
      expect(instance).to.have.property('summaries');

      // set and verify value
      var validValue = generateMockData('[ItemSummaryByMarketplace]', true);
      instance.summaries = validValue;
      expect(instance.summaries).to.equal(validValue);
    });

    it('should have the property vendorDetails (base name: "vendorDetails")', function() {
      // verify property exists
      expect(instance).to.have.property('vendorDetails');

      // set and verify value
      var validValue = generateMockData('[ItemVendorDetailsByMarketplace]', true);
      instance.vendorDetails = validValue;
      expect(instance.vendorDetails).to.equal(validValue);
    });

  });

  // Helper function to generate random test data
  function generateMockData(dataType, isArray = false) {
    if (!dataType) return {};

    // Handle array types
    if (isArray) {
      return [generateMockData(dataType), generateMockData(dataType)];
    }

    switch(dataType) {
      case 'String':
        return 'mock-' + Math.random().toString(36).substring(2, 10);
      case 'Number':
        return Math.floor(Math.random() * 1000);
      case 'Boolean':
        return Math.random() > 0.5;
      case 'Date':
        return new Date().toISOString();
      default:
        try {
          const ModelClass = SellingPartnerApiForCatalogItems[dataType];
          if (ModelClass) {
            const instance = Object.create(ModelClass.prototype);
            return instance;
          }
        } catch (e) {
          console.error("Error creating instance of", dataType);
          return {};
        }
        return {};
    }
  }

}));
