/**
 * Selling Partner API for Catalog Items
 * Use the Selling Partner API for Catalog Items to retrieve information about items in the Amazon catalog.  For more information, refer to the [Catalog Items API Use Case Guide](https://developer-docs.amazon.com/sp-api/docs/:catalog-items-api-v2022-04-01-use-case-guide).
 *
 * The version of the OpenAPI document: 2022-04-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.SellingPartnerApiForCatalogItems);
  }
}(this, function(expect, SellingPartnerApiForCatalogItems) {
  'use strict';

  var instance;

  beforeEach(function() {
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('ItemSummaryByMarketplace', function() {
    it('should create an instance of ItemSummaryByMarketplace', function() {
      // uncomment below and update the code to test ItemSummaryByMarketplace
      //var instance = new SellingPartnerApiForCatalogItems.ItemSummaryByMarketplace();
      //expect(instance).to.be.a(SellingPartnerApiForCatalogItems.ItemSummaryByMarketplace);
    });

    it('should have the property marketplaceId (base name: "marketplaceId")', function() {
      // uncomment below and update the code to test the property marketplaceId
      //var instance = new SellingPartnerApiForCatalogItems.ItemSummaryByMarketplace();
      //expect(instance).to.be();
    });

    it('should have the property adultProduct (base name: "adultProduct")', function() {
      // uncomment below and update the code to test the property adultProduct
      //var instance = new SellingPartnerApiForCatalogItems.ItemSummaryByMarketplace();
      //expect(instance).to.be();
    });

    it('should have the property autographed (base name: "autographed")', function() {
      // uncomment below and update the code to test the property autographed
      //var instance = new SellingPartnerApiForCatalogItems.ItemSummaryByMarketplace();
      //expect(instance).to.be();
    });

    it('should have the property brand (base name: "brand")', function() {
      // uncomment below and update the code to test the property brand
      //var instance = new SellingPartnerApiForCatalogItems.ItemSummaryByMarketplace();
      //expect(instance).to.be();
    });

    it('should have the property browseClassification (base name: "browseClassification")', function() {
      // uncomment below and update the code to test the property browseClassification
      //var instance = new SellingPartnerApiForCatalogItems.ItemSummaryByMarketplace();
      //expect(instance).to.be();
    });

    it('should have the property color (base name: "color")', function() {
      // uncomment below and update the code to test the property color
      //var instance = new SellingPartnerApiForCatalogItems.ItemSummaryByMarketplace();
      //expect(instance).to.be();
    });

    it('should have the property contributors (base name: "contributors")', function() {
      // uncomment below and update the code to test the property contributors
      //var instance = new SellingPartnerApiForCatalogItems.ItemSummaryByMarketplace();
      //expect(instance).to.be();
    });

    it('should have the property itemClassification (base name: "itemClassification")', function() {
      // uncomment below and update the code to test the property itemClassification
      //var instance = new SellingPartnerApiForCatalogItems.ItemSummaryByMarketplace();
      //expect(instance).to.be();
    });

    it('should have the property itemName (base name: "itemName")', function() {
      // uncomment below and update the code to test the property itemName
      //var instance = new SellingPartnerApiForCatalogItems.ItemSummaryByMarketplace();
      //expect(instance).to.be();
    });

    it('should have the property manufacturer (base name: "manufacturer")', function() {
      // uncomment below and update the code to test the property manufacturer
      //var instance = new SellingPartnerApiForCatalogItems.ItemSummaryByMarketplace();
      //expect(instance).to.be();
    });

    it('should have the property memorabilia (base name: "memorabilia")', function() {
      // uncomment below and update the code to test the property memorabilia
      //var instance = new SellingPartnerApiForCatalogItems.ItemSummaryByMarketplace();
      //expect(instance).to.be();
    });

    it('should have the property modelNumber (base name: "modelNumber")', function() {
      // uncomment below and update the code to test the property modelNumber
      //var instance = new SellingPartnerApiForCatalogItems.ItemSummaryByMarketplace();
      //expect(instance).to.be();
    });

    it('should have the property packageQuantity (base name: "packageQuantity")', function() {
      // uncomment below and update the code to test the property packageQuantity
      //var instance = new SellingPartnerApiForCatalogItems.ItemSummaryByMarketplace();
      //expect(instance).to.be();
    });

    it('should have the property partNumber (base name: "partNumber")', function() {
      // uncomment below and update the code to test the property partNumber
      //var instance = new SellingPartnerApiForCatalogItems.ItemSummaryByMarketplace();
      //expect(instance).to.be();
    });

    it('should have the property releaseDate (base name: "releaseDate")', function() {
      // uncomment below and update the code to test the property releaseDate
      //var instance = new SellingPartnerApiForCatalogItems.ItemSummaryByMarketplace();
      //expect(instance).to.be();
    });

    it('should have the property size (base name: "size")', function() {
      // uncomment below and update the code to test the property size
      //var instance = new SellingPartnerApiForCatalogItems.ItemSummaryByMarketplace();
      //expect(instance).to.be();
    });

    it('should have the property style (base name: "style")', function() {
      // uncomment below and update the code to test the property style
      //var instance = new SellingPartnerApiForCatalogItems.ItemSummaryByMarketplace();
      //expect(instance).to.be();
    });

    it('should have the property tradeInEligible (base name: "tradeInEligible")', function() {
      // uncomment below and update the code to test the property tradeInEligible
      //var instance = new SellingPartnerApiForCatalogItems.ItemSummaryByMarketplace();
      //expect(instance).to.be();
    });

    it('should have the property websiteDisplayGroup (base name: "websiteDisplayGroup")', function() {
      // uncomment below and update the code to test the property websiteDisplayGroup
      //var instance = new SellingPartnerApiForCatalogItems.ItemSummaryByMarketplace();
      //expect(instance).to.be();
    });

    it('should have the property websiteDisplayGroupName (base name: "websiteDisplayGroupName")', function() {
      // uncomment below and update the code to test the property websiteDisplayGroupName
      //var instance = new SellingPartnerApiForCatalogItems.ItemSummaryByMarketplace();
      //expect(instance).to.be();
    });

  });

}));