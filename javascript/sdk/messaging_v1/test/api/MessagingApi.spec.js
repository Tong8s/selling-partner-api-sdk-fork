/**
 * Selling Partner API for Messaging
 * With the Messaging API you can build applications that send messages to buyers. You can get a list of message types that are available for an order that you specify, then call an operation that sends a message to the buyer for that order. The Messaging API returns responses that are formed according to the <a href=https://tools.ietf.org/html/draft-kelly-json-hal-08>JSON Hypertext Application Language</a> (HAL) standard.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.SellingPartnerApiForMessaging);
  }
}(this, function(expect, SellingPartnerApiForMessaging) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new SellingPartnerApiForMessaging.MessagingApi();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('MessagingApi', function() {
    describe('confirmCustomizationDetails', function() {
      it('should call confirmCustomizationDetails successfully', function(done) {
        //uncomment below and update the code to test confirmCustomizationDetails
        //instance.confirmCustomizationDetails(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('createAmazonMotors', function() {
      it('should call createAmazonMotors successfully', function(done) {
        //uncomment below and update the code to test createAmazonMotors
        //instance.createAmazonMotors(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('createConfirmDeliveryDetails', function() {
      it('should call createConfirmDeliveryDetails successfully', function(done) {
        //uncomment below and update the code to test createConfirmDeliveryDetails
        //instance.createConfirmDeliveryDetails(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('createConfirmOrderDetails', function() {
      it('should call createConfirmOrderDetails successfully', function(done) {
        //uncomment below and update the code to test createConfirmOrderDetails
        //instance.createConfirmOrderDetails(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('createConfirmServiceDetails', function() {
      it('should call createConfirmServiceDetails successfully', function(done) {
        //uncomment below and update the code to test createConfirmServiceDetails
        //instance.createConfirmServiceDetails(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('createDigitalAccessKey', function() {
      it('should call createDigitalAccessKey successfully', function(done) {
        //uncomment below and update the code to test createDigitalAccessKey
        //instance.createDigitalAccessKey(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('createLegalDisclosure', function() {
      it('should call createLegalDisclosure successfully', function(done) {
        //uncomment below and update the code to test createLegalDisclosure
        //instance.createLegalDisclosure(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('createNegativeFeedbackRemoval', function() {
      it('should call createNegativeFeedbackRemoval successfully', function(done) {
        //uncomment below and update the code to test createNegativeFeedbackRemoval
        //instance.createNegativeFeedbackRemoval(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('createUnexpectedProblem', function() {
      it('should call createUnexpectedProblem successfully', function(done) {
        //uncomment below and update the code to test createUnexpectedProblem
        //instance.createUnexpectedProblem(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('createWarranty', function() {
      it('should call createWarranty successfully', function(done) {
        //uncomment below and update the code to test createWarranty
        //instance.createWarranty(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getAttributes', function() {
      it('should call getAttributes successfully', function(done) {
        //uncomment below and update the code to test getAttributes
        //instance.getAttributes(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getMessagingActionsForOrder', function() {
      it('should call getMessagingActionsForOrder successfully', function(done) {
        //uncomment below and update the code to test getMessagingActionsForOrder
        //instance.getMessagingActionsForOrder(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('sendInvoice', function() {
      it('should call sendInvoice successfully', function(done) {
        //uncomment below and update the code to test sendInvoice
        //instance.sendInvoice(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
  });

}));
