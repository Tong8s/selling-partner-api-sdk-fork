/**
 * Selling Partner API for Notifications
 * The Selling Partner API for Notifications lets you subscribe to notifications that are relevant to a selling partner's business. Using this API you can create a destination to receive notifications, subscribe to notifications, delete notification subscriptions, and more.  For more information, refer to the [Notifications Use Case Guide](https://developer-docs.amazon.com/sp-api/docs/notifications-api-v1-use-case-guide).
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import {ApiClient} from './ApiClient.js';
import {AggregationFilter} from './js_client.notifications_v1.model/AggregationFilter.js';
import {AggregationSettings} from './js_client.notifications_v1.model/AggregationSettings.js';
import {AggregationTimePeriod} from './js_client.notifications_v1.model/AggregationTimePeriod.js';
import {CreateDestinationRequest} from './js_client.notifications_v1.model/CreateDestinationRequest.js';
import {CreateDestinationResponse} from './js_client.notifications_v1.model/CreateDestinationResponse.js';
import {CreateSubscriptionRequest} from './js_client.notifications_v1.model/CreateSubscriptionRequest.js';
import {CreateSubscriptionResponse} from './js_client.notifications_v1.model/CreateSubscriptionResponse.js';
import {DeleteDestinationResponse} from './js_client.notifications_v1.model/DeleteDestinationResponse.js';
import {DeleteSubscriptionByIdResponse} from './js_client.notifications_v1.model/DeleteSubscriptionByIdResponse.js';
import {Destination} from './js_client.notifications_v1.model/Destination.js';
import {DestinationResource} from './js_client.notifications_v1.model/DestinationResource.js';
import {DestinationResourceSpecification} from './js_client.notifications_v1.model/DestinationResourceSpecification.js';
import {Error} from './js_client.notifications_v1.model/Error.js';
import {EventBridgeResource} from './js_client.notifications_v1.model/EventBridgeResource.js';
import {EventBridgeResourceSpecification} from './js_client.notifications_v1.model/EventBridgeResourceSpecification.js';
import {EventFilter} from './js_client.notifications_v1.model/EventFilter.js';
import {GetDestinationResponse} from './js_client.notifications_v1.model/GetDestinationResponse.js';
import {GetDestinationsResponse} from './js_client.notifications_v1.model/GetDestinationsResponse.js';
import {GetSubscriptionByIdResponse} from './js_client.notifications_v1.model/GetSubscriptionByIdResponse.js';
import {GetSubscriptionResponse} from './js_client.notifications_v1.model/GetSubscriptionResponse.js';
import {MarketplaceFilter} from './js_client.notifications_v1.model/MarketplaceFilter.js';
import {OrderChangeTypeEnum} from './js_client.notifications_v1.model/OrderChangeTypeEnum.js';
import {OrderChangeTypeFilter} from './js_client.notifications_v1.model/OrderChangeTypeFilter.js';
import {ProcessingDirective} from './js_client.notifications_v1.model/ProcessingDirective.js';
import {SqsResource} from './js_client.notifications_v1.model/SqsResource.js';
import {Subscription} from './js_client.notifications_v1.model/Subscription.js';
import {NotificationsApi} from './js_client.notifications_v1.api/NotificationsApi.js';


/**
* The Selling Partner API for Notifications lets you subscribe to notifications that are relevant to a selling partner&#39;s business. Using this API you can create a destination to receive notifications, subscribe to notifications, delete notification subscriptions, and more.  For more information, refer to the [Notifications Use Case Guide](https://developer-docs.amazon.com/sp-api/docs/notifications-api-v1-use-case-guide)..<br>
* The <code>index</code> module provides access to constructors for all the classes which comprise the public API.
* <p>
* An AMD (recommended!) or CommonJS application will generally do something equivalent to the following:
* <pre>
* var SellingPartnerApiForNotifications = require('index'); // See note below*.
* var xxxSvc = new SellingPartnerApiForNotifications.XxxApi(); // Allocate the API class we're going to use.
* var yyyModel = new SellingPartnerApiForNotifications.Yyy(); // Construct a model instance.
* yyyModel.someProperty = 'someValue';
* ...
* var zzz = xxxSvc.doSomething(yyyModel); // Invoke the service.
* ...
* </pre>
* <em>*NOTE: For a top-level AMD script, use require(['index'], function(){...})
* and put the application logic within the callback function.</em>
* </p>
* <p>
* A non-AMD browser application (discouraged) might do something like this:
* <pre>
* var xxxSvc = new SellingPartnerApiForNotifications.XxxApi(); // Allocate the API class we're going to use.
* var yyy = new SellingPartnerApiForNotifications.Yyy(); // Construct a model instance.
* yyyModel.someProperty = 'someValue';
* ...
* var zzz = xxxSvc.doSomething(yyyModel); // Invoke the service.
* ...
* </pre>
* </p>
* @module index
* @version v1
*/
export {
    /**
     * The ApiClient constructor.
     * @property {module:ApiClient}
     */
    ApiClient,

    /**
     * The AggregationFilter model constructor.
     * @property {module:js_client.notifications_v1.model/AggregationFilter}
     */
    AggregationFilter,

    /**
     * The AggregationSettings model constructor.
     * @property {module:js_client.notifications_v1.model/AggregationSettings}
     */
    AggregationSettings,

    /**
     * The AggregationTimePeriod model constructor.
     * @property {module:js_client.notifications_v1.model/AggregationTimePeriod}
     */
    AggregationTimePeriod,

    /**
     * The CreateDestinationRequest model constructor.
     * @property {module:js_client.notifications_v1.model/CreateDestinationRequest}
     */
    CreateDestinationRequest,

    /**
     * The CreateDestinationResponse model constructor.
     * @property {module:js_client.notifications_v1.model/CreateDestinationResponse}
     */
    CreateDestinationResponse,

    /**
     * The CreateSubscriptionRequest model constructor.
     * @property {module:js_client.notifications_v1.model/CreateSubscriptionRequest}
     */
    CreateSubscriptionRequest,

    /**
     * The CreateSubscriptionResponse model constructor.
     * @property {module:js_client.notifications_v1.model/CreateSubscriptionResponse}
     */
    CreateSubscriptionResponse,

    /**
     * The DeleteDestinationResponse model constructor.
     * @property {module:js_client.notifications_v1.model/DeleteDestinationResponse}
     */
    DeleteDestinationResponse,

    /**
     * The DeleteSubscriptionByIdResponse model constructor.
     * @property {module:js_client.notifications_v1.model/DeleteSubscriptionByIdResponse}
     */
    DeleteSubscriptionByIdResponse,

    /**
     * The Destination model constructor.
     * @property {module:js_client.notifications_v1.model/Destination}
     */
    Destination,

    /**
     * The DestinationResource model constructor.
     * @property {module:js_client.notifications_v1.model/DestinationResource}
     */
    DestinationResource,

    /**
     * The DestinationResourceSpecification model constructor.
     * @property {module:js_client.notifications_v1.model/DestinationResourceSpecification}
     */
    DestinationResourceSpecification,

    /**
     * The Error model constructor.
     * @property {module:js_client.notifications_v1.model/Error}
     */
    Error,

    /**
     * The EventBridgeResource model constructor.
     * @property {module:js_client.notifications_v1.model/EventBridgeResource}
     */
    EventBridgeResource,

    /**
     * The EventBridgeResourceSpecification model constructor.
     * @property {module:js_client.notifications_v1.model/EventBridgeResourceSpecification}
     */
    EventBridgeResourceSpecification,

    /**
     * The EventFilter model constructor.
     * @property {module:js_client.notifications_v1.model/EventFilter}
     */
    EventFilter,

    /**
     * The GetDestinationResponse model constructor.
     * @property {module:js_client.notifications_v1.model/GetDestinationResponse}
     */
    GetDestinationResponse,

    /**
     * The GetDestinationsResponse model constructor.
     * @property {module:js_client.notifications_v1.model/GetDestinationsResponse}
     */
    GetDestinationsResponse,

    /**
     * The GetSubscriptionByIdResponse model constructor.
     * @property {module:js_client.notifications_v1.model/GetSubscriptionByIdResponse}
     */
    GetSubscriptionByIdResponse,

    /**
     * The GetSubscriptionResponse model constructor.
     * @property {module:js_client.notifications_v1.model/GetSubscriptionResponse}
     */
    GetSubscriptionResponse,

    /**
     * The MarketplaceFilter model constructor.
     * @property {module:js_client.notifications_v1.model/MarketplaceFilter}
     */
    MarketplaceFilter,

    /**
     * The OrderChangeTypeEnum model constructor.
     * @property {module:js_client.notifications_v1.model/OrderChangeTypeEnum}
     */
    OrderChangeTypeEnum,

    /**
     * The OrderChangeTypeFilter model constructor.
     * @property {module:js_client.notifications_v1.model/OrderChangeTypeFilter}
     */
    OrderChangeTypeFilter,

    /**
     * The ProcessingDirective model constructor.
     * @property {module:js_client.notifications_v1.model/ProcessingDirective}
     */
    ProcessingDirective,

    /**
     * The SqsResource model constructor.
     * @property {module:js_client.notifications_v1.model/SqsResource}
     */
    SqsResource,

    /**
     * The Subscription model constructor.
     * @property {module:js_client.notifications_v1.model/Subscription}
     */
    Subscription,

    /**
    * The NotificationsApi service constructor.
    * @property {module:js_client.notifications_v1.api/NotificationsApi}
    */
    NotificationsApi
};
