/**
 * Selling Partner API for Listings Items
 * The Selling Partner API for Listings Items (Listings Items API) provides programmatic access to selling partner listings on Amazon. Use this API in collaboration with the Selling Partner API for Product Type Definitions, which you use to retrieve the information about Amazon product types needed to use the Listings Items API.  For more information, see the [Listings Items API Use Case Guide](https://developer-docs.amazon.com/sp-api/docs/listings-items-api-v2021-08-01-use-case-guide).
 *
 * The version of the OpenAPI document: 2021-08-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.SellingPartnerApiForListingsItems);
  }
}(this, function(expect, SellingPartnerApiForListingsItems) {
  'use strict';

  var instance;

  beforeEach(function() {
    try{
     instance = new SellingPartnerApiForListingsItems.Item();
    } catch (e) {
     //Handle the cases when this model extends another model by using Model.call(this);
     instance = Object.create(SellingPartnerApiForListingsItems.Item.prototype);
    }
  });

  afterEach(function() {
    instance = null;
  })

  describe('Item', function() {
    it('should create an instance of Item', function() {
      expect(instance).to.be.a(SellingPartnerApiForListingsItems.Item);
    });

    it('should have the property sku (base name: "sku")', function() {
      // verify property exists
      expect(instance).to.have.property('sku');

      // set and verify value
      var validValue = generateMockData('String');
      instance.sku = validValue;
      expect(instance.sku).to.equal(validValue);
    });

    it('should have the property summaries (base name: "summaries")', function() {
      // verify property exists
      expect(instance).to.have.property('summaries');

      // set and verify value
      var validValue = generateMockData('[ItemSummaryByMarketplace]', true);
      instance.summaries = validValue;
      expect(instance.summaries).to.equal(validValue);
    });

    it('should have the property attributes (base name: "attributes")', function() {
      // verify property exists
      expect(instance).to.have.property('attributes');

      // set and verify value
      var validValue = generateMockData('{String: Object}');
      instance.attributes = validValue;
      expect(instance.attributes).to.equal(validValue);
    });

    it('should have the property issues (base name: "issues")', function() {
      // verify property exists
      expect(instance).to.have.property('issues');

      // set and verify value
      var validValue = generateMockData('[Issue]', true);
      instance.issues = validValue;
      expect(instance.issues).to.equal(validValue);
    });

    it('should have the property offers (base name: "offers")', function() {
      // verify property exists
      expect(instance).to.have.property('offers');

      // set and verify value
      var validValue = generateMockData('[ItemOfferByMarketplace]', true);
      instance.offers = validValue;
      expect(instance.offers).to.equal(validValue);
    });

    it('should have the property fulfillmentAvailability (base name: "fulfillmentAvailability")', function() {
      // verify property exists
      expect(instance).to.have.property('fulfillmentAvailability');

      // set and verify value
      var validValue = generateMockData('[FulfillmentAvailability]', true);
      instance.fulfillmentAvailability = validValue;
      expect(instance.fulfillmentAvailability).to.equal(validValue);
    });

    it('should have the property procurement (base name: "procurement")', function() {
      // verify property exists
      expect(instance).to.have.property('procurement');

      // set and verify value
      var validValue = generateMockData('[ItemProcurement]', true);
      instance.procurement = validValue;
      expect(instance.procurement).to.equal(validValue);
    });

    it('should have the property relationships (base name: "relationships")', function() {
      // verify property exists
      expect(instance).to.have.property('relationships');

      // set and verify value
      var validValue = generateMockData('[ItemRelationshipsByMarketplace]', true);
      instance.relationships = validValue;
      expect(instance.relationships).to.equal(validValue);
    });

    it('should have the property productTypes (base name: "productTypes")', function() {
      // verify property exists
      expect(instance).to.have.property('productTypes');

      // set and verify value
      var validValue = generateMockData('[ItemProductTypeByMarketplace]', true);
      instance.productTypes = validValue;
      expect(instance.productTypes).to.equal(validValue);
    });

  });

  // Helper function to generate random test data
  function generateMockData(dataType, isArray = false) {
    if (!dataType) return {};

    // Handle array types
    if (isArray) {
      return [generateMockData(dataType), generateMockData(dataType)];
    }

    switch(dataType) {
      case 'String':
        return 'mock-' + Math.random().toString(36).substring(2, 10);
      case 'Number':
        return Math.floor(Math.random() * 1000);
      case 'Boolean':
        return Math.random() > 0.5;
      case 'Date':
        return new Date().toISOString();
      default:
        try {
          const ModelClass = SellingPartnerApiForListingsItems[dataType];
          if (ModelClass) {
            const instance = Object.create(ModelClass.prototype);
            return instance;
          }
        } catch (e) {
          console.error("Error creating instance of", dataType);
          return {};
        }
        return {};
    }
  }

}));
