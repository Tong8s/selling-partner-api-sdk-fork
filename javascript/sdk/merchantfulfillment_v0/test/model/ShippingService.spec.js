/**
 * Selling Partner API for Merchant Fulfillment
 * With the Selling Partner API for Merchant Fulfillment, you can build applications that sellers can use to purchase shipping for non-Prime and Prime orders using Amazon's Buy Shipping Services.
 *
 * The version of the OpenAPI document: v0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.SellingPartnerApiForMerchantFulfillment);
  }
}(this, function(expect, SellingPartnerApiForMerchantFulfillment) {
  'use strict';

  var instance;

  beforeEach(function() {
    try{
     instance = new SellingPartnerApiForMerchantFulfillment.ShippingService();
    } catch (e) {
     //Handle the cases when this model extends another model by using Model.call(this);
     instance = Object.create(SellingPartnerApiForMerchantFulfillment.ShippingService.prototype);
    }
  });

  afterEach(function() {
    instance = null;
  })

  describe('ShippingService', function() {
    it('should create an instance of ShippingService', function() {
      expect(instance).to.be.a(SellingPartnerApiForMerchantFulfillment.ShippingService);
    });

    it('should have the property shippingServiceName (base name: "ShippingServiceName")', function() {
      // verify property exists
      expect(instance).to.have.property('shippingServiceName');

      // set and verify value
      var validValue = generateMockData('String');
      instance.shippingServiceName = validValue;
      expect(instance.shippingServiceName).to.equal(validValue);
    });

    it('should have the property carrierName (base name: "CarrierName")', function() {
      // verify property exists
      expect(instance).to.have.property('carrierName');

      // set and verify value
      var validValue = generateMockData('String');
      instance.carrierName = validValue;
      expect(instance.carrierName).to.equal(validValue);
    });

    it('should have the property shippingServiceId (base name: "ShippingServiceId")', function() {
      // verify property exists
      expect(instance).to.have.property('shippingServiceId');

      // set and verify value
      var validValue = generateMockData('String');
      instance.shippingServiceId = validValue;
      expect(instance.shippingServiceId).to.equal(validValue);
    });

    it('should have the property shippingServiceOfferId (base name: "ShippingServiceOfferId")', function() {
      // verify property exists
      expect(instance).to.have.property('shippingServiceOfferId');

      // set and verify value
      var validValue = generateMockData('String');
      instance.shippingServiceOfferId = validValue;
      expect(instance.shippingServiceOfferId).to.equal(validValue);
    });

    it('should have the property shipDate (base name: "ShipDate")', function() {
      // verify property exists
      expect(instance).to.have.property('shipDate');

      // set and verify value
      var validValue = generateMockData('Date');
      instance.shipDate = validValue;
      expect(instance.shipDate).to.equal(validValue);
    });

    it('should have the property earliestEstimatedDeliveryDate (base name: "EarliestEstimatedDeliveryDate")', function() {
      // verify property exists
      expect(instance).to.have.property('earliestEstimatedDeliveryDate');

      // set and verify value
      var validValue = generateMockData('Date');
      instance.earliestEstimatedDeliveryDate = validValue;
      expect(instance.earliestEstimatedDeliveryDate).to.equal(validValue);
    });

    it('should have the property latestEstimatedDeliveryDate (base name: "LatestEstimatedDeliveryDate")', function() {
      // verify property exists
      expect(instance).to.have.property('latestEstimatedDeliveryDate');

      // set and verify value
      var validValue = generateMockData('Date');
      instance.latestEstimatedDeliveryDate = validValue;
      expect(instance.latestEstimatedDeliveryDate).to.equal(validValue);
    });

    it('should have the property rate (base name: "Rate")', function() {
      // verify property exists
      expect(instance).to.have.property('rate');

      // set and verify value
      var validValue = generateMockData('CurrencyAmount');
      instance.rate = validValue;
      expect(instance.rate).to.equal(validValue);
    });

    it('should have the property shippingServiceOptions (base name: "ShippingServiceOptions")', function() {
      // verify property exists
      expect(instance).to.have.property('shippingServiceOptions');

      // set and verify value
      var validValue = generateMockData('ShippingServiceOptions');
      instance.shippingServiceOptions = validValue;
      expect(instance.shippingServiceOptions).to.equal(validValue);
    });

    it('should have the property availableShippingServiceOptions (base name: "AvailableShippingServiceOptions")', function() {
      // verify property exists
      expect(instance).to.have.property('availableShippingServiceOptions');

      // set and verify value
      var validValue = generateMockData('AvailableShippingServiceOptions');
      instance.availableShippingServiceOptions = validValue;
      expect(instance.availableShippingServiceOptions).to.equal(validValue);
    });

    it('should have the property availableLabelFormats (base name: "AvailableLabelFormats")', function() {
      // verify property exists
      expect(instance).to.have.property('availableLabelFormats');

      // set and verify value
      var validValue = generateMockData('[LabelFormat]', true);
      instance.availableLabelFormats = validValue;
      expect(instance.availableLabelFormats).to.equal(validValue);
    });

    it('should have the property availableFormatOptionsForLabel (base name: "AvailableFormatOptionsForLabel")', function() {
      // verify property exists
      expect(instance).to.have.property('availableFormatOptionsForLabel');

      // set and verify value
      var validValue = generateMockData('[LabelFormatOption]', true);
      instance.availableFormatOptionsForLabel = validValue;
      expect(instance.availableFormatOptionsForLabel).to.equal(validValue);
    });

    it('should have the property requiresAdditionalSellerInputs (base name: "RequiresAdditionalSellerInputs")', function() {
      // verify property exists
      expect(instance).to.have.property('requiresAdditionalSellerInputs');

      // set and verify value
      var validValue = generateMockData('Boolean');
      instance.requiresAdditionalSellerInputs = validValue;
      expect(instance.requiresAdditionalSellerInputs).to.equal(validValue);
    });

    it('should have the property benefits (base name: "Benefits")', function() {
      // verify property exists
      expect(instance).to.have.property('benefits');

      // set and verify value
      var validValue = generateMockData('Benefits');
      instance.benefits = validValue;
      expect(instance.benefits).to.equal(validValue);
    });

  });

  // Helper function to generate random test data
  function generateMockData(dataType, isArray = false) {
    if (!dataType) return {};

    // Handle array types
    if (isArray) {
      return [generateMockData(dataType), generateMockData(dataType)];
    }

    switch(dataType) {
      case 'String':
        return 'mock-' + Math.random().toString(36).substring(2, 10);
      case 'Number':
        return Math.floor(Math.random() * 1000);
      case 'Boolean':
        return Math.random() > 0.5;
      case 'Date':
        return new Date().toISOString();
      default:
        try {
          const ModelClass = SellingPartnerApiForMerchantFulfillment[dataType];
          if (ModelClass) {
            const instance = Object.create(ModelClass.prototype);
            return instance;
          }
        } catch (e) {
          console.error("Error creating instance of", dataType);
          return {};
        }
        return {};
    }
  }

}));
