/**
 * Selling Partner API for Merchant Fulfillment
 * With the Selling Partner API for Merchant Fulfillment, you can build applications that sellers can use to purchase shipping for non-Prime and Prime orders using Amazon's Buy Shipping Services.
 *
 * The version of the OpenAPI document: v0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.SellingPartnerApiForMerchantFulfillment);
  }
}(this, function(expect, SellingPartnerApiForMerchantFulfillment) {
  'use strict';

  var instance;

  beforeEach(function() {
    try{
     instance = new SellingPartnerApiForMerchantFulfillment.Shipment();
    } catch (e) {
     //Handle the cases when this model extends another model by using Model.call(this);
     instance = Object.create(SellingPartnerApiForMerchantFulfillment.Shipment.prototype);
    }
  });

  afterEach(function() {
    instance = null;
  })

  describe('Shipment', function() {
    it('should create an instance of Shipment', function() {
      expect(instance).to.be.a(SellingPartnerApiForMerchantFulfillment.Shipment);
    });

    it('should have the property shipmentId (base name: "ShipmentId")', function() {
      // verify property exists
      expect(instance).to.have.property('shipmentId');

      // set and verify value
      var validValue = generateMockData('String');
      instance.shipmentId = validValue;
      expect(instance.shipmentId).to.equal(validValue);
    });

    it('should have the property amazonOrderId (base name: "AmazonOrderId")', function() {
      // verify property exists
      expect(instance).to.have.property('amazonOrderId');

      // set and verify value
      var validValue = generateMockData('String');
      instance.amazonOrderId = validValue;
      expect(instance.amazonOrderId).to.equal(validValue);
    });

    it('should have the property sellerOrderId (base name: "SellerOrderId")', function() {
      // verify property exists
      expect(instance).to.have.property('sellerOrderId');

      // set and verify value
      var validValue = generateMockData('String');
      instance.sellerOrderId = validValue;
      expect(instance.sellerOrderId).to.equal(validValue);
    });

    it('should have the property itemList (base name: "ItemList")', function() {
      // verify property exists
      expect(instance).to.have.property('itemList');

      // set and verify value
      var validValue = generateMockData('[Item]', true);
      instance.itemList = validValue;
      expect(instance.itemList).to.equal(validValue);
    });

    it('should have the property shipFromAddress (base name: "ShipFromAddress")', function() {
      // verify property exists
      expect(instance).to.have.property('shipFromAddress');

      // set and verify value
      var validValue = generateMockData('Address');
      instance.shipFromAddress = validValue;
      expect(instance.shipFromAddress).to.equal(validValue);
    });

    it('should have the property shipToAddress (base name: "ShipToAddress")', function() {
      // verify property exists
      expect(instance).to.have.property('shipToAddress');

      // set and verify value
      var validValue = generateMockData('Address');
      instance.shipToAddress = validValue;
      expect(instance.shipToAddress).to.equal(validValue);
    });

    it('should have the property packageDimensions (base name: "PackageDimensions")', function() {
      // verify property exists
      expect(instance).to.have.property('packageDimensions');

      // set and verify value
      var validValue = generateMockData('PackageDimensions');
      instance.packageDimensions = validValue;
      expect(instance.packageDimensions).to.equal(validValue);
    });

    it('should have the property weight (base name: "Weight")', function() {
      // verify property exists
      expect(instance).to.have.property('weight');

      // set and verify value
      var validValue = generateMockData('Weight');
      instance.weight = validValue;
      expect(instance.weight).to.equal(validValue);
    });

    it('should have the property insurance (base name: "Insurance")', function() {
      // verify property exists
      expect(instance).to.have.property('insurance');

      // set and verify value
      var validValue = generateMockData('CurrencyAmount');
      instance.insurance = validValue;
      expect(instance.insurance).to.equal(validValue);
    });

    it('should have the property shippingService (base name: "ShippingService")', function() {
      // verify property exists
      expect(instance).to.have.property('shippingService');

      // set and verify value
      var validValue = generateMockData('ShippingService');
      instance.shippingService = validValue;
      expect(instance.shippingService).to.equal(validValue);
    });

    it('should have the property label (base name: "Label")', function() {
      // verify property exists
      expect(instance).to.have.property('label');

      // set and verify value
      var validValue = generateMockData('Label');
      instance.label = validValue;
      expect(instance.label).to.equal(validValue);
    });

    it('should have the property status (base name: "Status")', function() {
      // verify property exists
      expect(instance).to.have.property('status');

      // set and verify value
      var validValue = generateMockData('ShipmentStatus');
      instance.status = validValue;
      expect(instance.status).to.equal(validValue);
    });

    it('should have the property trackingId (base name: "TrackingId")', function() {
      // verify property exists
      expect(instance).to.have.property('trackingId');

      // set and verify value
      var validValue = generateMockData('String');
      instance.trackingId = validValue;
      expect(instance.trackingId).to.equal(validValue);
    });

    it('should have the property createdDate (base name: "CreatedDate")', function() {
      // verify property exists
      expect(instance).to.have.property('createdDate');

      // set and verify value
      var validValue = generateMockData('Date');
      instance.createdDate = validValue;
      expect(instance.createdDate).to.equal(validValue);
    });

    it('should have the property lastUpdatedDate (base name: "LastUpdatedDate")', function() {
      // verify property exists
      expect(instance).to.have.property('lastUpdatedDate');

      // set and verify value
      var validValue = generateMockData('Date');
      instance.lastUpdatedDate = validValue;
      expect(instance.lastUpdatedDate).to.equal(validValue);
    });

  });

  // Helper function to generate random test data
  function generateMockData(dataType, isArray = false) {
    if (!dataType) return {};

    // Handle array types
    if (isArray) {
      return [generateMockData(dataType), generateMockData(dataType)];
    }

    switch(dataType) {
      case 'String':
        return 'mock-' + Math.random().toString(36).substring(2, 10);
      case 'Number':
        return Math.floor(Math.random() * 1000);
      case 'Boolean':
        return Math.random() > 0.5;
      case 'Date':
        return new Date().toISOString();
      default:
        try {
          const ModelClass = SellingPartnerApiForMerchantFulfillment[dataType];
          if (ModelClass) {
            const instance = Object.create(ModelClass.prototype);
            return instance;
          }
        } catch (e) {
          console.error("Error creating instance of", dataType);
          return {};
        }
        return {};
    }
  }

}));
