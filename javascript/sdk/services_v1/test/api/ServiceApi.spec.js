/**
 * Selling Partner API for Services
 * With the Services API, you can build applications that help service providers get and modify their service orders and manage their resources.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.SellingPartnerApiForServices);
  }
}(this, function(expect, SellingPartnerApiForServices) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new SellingPartnerApiForServices.ServiceApi();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('ServiceApi', function() {
    describe('addAppointmentForServiceJobByServiceJobId', function() {
      it('should call addAppointmentForServiceJobByServiceJobId successfully', function(done) {
        //uncomment below and update the code to test addAppointmentForServiceJobByServiceJobId
        //instance.addAppointmentForServiceJobByServiceJobId(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('assignAppointmentResources', function() {
      it('should call assignAppointmentResources successfully', function(done) {
        //uncomment below and update the code to test assignAppointmentResources
        //instance.assignAppointmentResources(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('cancelReservation', function() {
      it('should call cancelReservation successfully', function(done) {
        //uncomment below and update the code to test cancelReservation
        //instance.cancelReservation(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('cancelServiceJobByServiceJobId', function() {
      it('should call cancelServiceJobByServiceJobId successfully', function(done) {
        //uncomment below and update the code to test cancelServiceJobByServiceJobId
        //instance.cancelServiceJobByServiceJobId(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('completeServiceJobByServiceJobId', function() {
      it('should call completeServiceJobByServiceJobId successfully', function(done) {
        //uncomment below and update the code to test completeServiceJobByServiceJobId
        //instance.completeServiceJobByServiceJobId(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('createReservation', function() {
      it('should call createReservation successfully', function(done) {
        //uncomment below and update the code to test createReservation
        //instance.createReservation(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('createServiceDocumentUploadDestination', function() {
      it('should call createServiceDocumentUploadDestination successfully', function(done) {
        //uncomment below and update the code to test createServiceDocumentUploadDestination
        //instance.createServiceDocumentUploadDestination(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getAppointmentSlots', function() {
      it('should call getAppointmentSlots successfully', function(done) {
        //uncomment below and update the code to test getAppointmentSlots
        //instance.getAppointmentSlots(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getAppointmmentSlotsByJobId', function() {
      it('should call getAppointmmentSlotsByJobId successfully', function(done) {
        //uncomment below and update the code to test getAppointmmentSlotsByJobId
        //instance.getAppointmmentSlotsByJobId(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getFixedSlotCapacity', function() {
      it('should call getFixedSlotCapacity successfully', function(done) {
        //uncomment below and update the code to test getFixedSlotCapacity
        //instance.getFixedSlotCapacity(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getRangeSlotCapacity', function() {
      it('should call getRangeSlotCapacity successfully', function(done) {
        //uncomment below and update the code to test getRangeSlotCapacity
        //instance.getRangeSlotCapacity(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getServiceJobByServiceJobId', function() {
      it('should call getServiceJobByServiceJobId successfully', function(done) {
        //uncomment below and update the code to test getServiceJobByServiceJobId
        //instance.getServiceJobByServiceJobId(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getServiceJobs', function() {
      it('should call getServiceJobs successfully', function(done) {
        //uncomment below and update the code to test getServiceJobs
        //instance.getServiceJobs(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('rescheduleAppointmentForServiceJobByServiceJobId', function() {
      it('should call rescheduleAppointmentForServiceJobByServiceJobId successfully', function(done) {
        //uncomment below and update the code to test rescheduleAppointmentForServiceJobByServiceJobId
        //instance.rescheduleAppointmentForServiceJobByServiceJobId(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('setAppointmentFulfillmentData', function() {
      it('should call setAppointmentFulfillmentData successfully', function(done) {
        //uncomment below and update the code to test setAppointmentFulfillmentData
        //instance.setAppointmentFulfillmentData(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updateReservation', function() {
      it('should call updateReservation successfully', function(done) {
        //uncomment below and update the code to test updateReservation
        //instance.updateReservation(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updateSchedule', function() {
      it('should call updateSchedule successfully', function(done) {
        //uncomment below and update the code to test updateSchedule
        //instance.updateSchedule(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
  });

}));
